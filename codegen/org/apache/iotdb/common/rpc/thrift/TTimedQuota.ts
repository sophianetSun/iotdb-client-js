/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITTimedQuotaArgs {
    timeUnit: number | Int64;
    softLimit: number | Int64;
}
export class TTimedQuota {
    public timeUnit: Int64;
    public softLimit: Int64;
    constructor(args: ITTimedQuotaArgs) {
        if (args != null && args.timeUnit != null) {
            if (typeof args.timeUnit === "number") {
                this.timeUnit = new Int64(args.timeUnit);
            }
            else {
                this.timeUnit = args.timeUnit;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timeUnit] is unset!");
        }
        if (args != null && args.softLimit != null) {
            if (typeof args.softLimit === "number") {
                this.softLimit = new Int64(args.softLimit);
            }
            else {
                this.softLimit = args.softLimit;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[softLimit] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TTimedQuota");
        if (this.timeUnit != null) {
            output.writeFieldBegin("timeUnit", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.timeUnit);
            output.writeFieldEnd();
        }
        if (this.softLimit != null) {
            output.writeFieldBegin("softLimit", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.softLimit);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TTimedQuota {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.timeUnit = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.softLimit = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.timeUnit !== undefined && _args.softLimit !== undefined) {
            return new TTimedQuota(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TTimedQuota from input");
        }
    }
}
