/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TEndPoint from "./TEndPoint";
export interface ITConfigNodeLocationArgs {
    configNodeId: number;
    internalEndPoint: TEndPoint.TEndPoint;
    consensusEndPoint: TEndPoint.TEndPoint;
}
export class TConfigNodeLocation {
    public configNodeId: number;
    public internalEndPoint: TEndPoint.TEndPoint;
    public consensusEndPoint: TEndPoint.TEndPoint;
    constructor(args: ITConfigNodeLocationArgs) {
        if (args != null && args.configNodeId != null) {
            this.configNodeId = args.configNodeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[configNodeId] is unset!");
        }
        if (args != null && args.internalEndPoint != null) {
            this.internalEndPoint = args.internalEndPoint;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[internalEndPoint] is unset!");
        }
        if (args != null && args.consensusEndPoint != null) {
            this.consensusEndPoint = args.consensusEndPoint;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[consensusEndPoint] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TConfigNodeLocation");
        if (this.configNodeId != null) {
            output.writeFieldBegin("configNodeId", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.configNodeId);
            output.writeFieldEnd();
        }
        if (this.internalEndPoint != null) {
            output.writeFieldBegin("internalEndPoint", thrift.Thrift.Type.STRUCT, 2);
            this.internalEndPoint.write(output);
            output.writeFieldEnd();
        }
        if (this.consensusEndPoint != null) {
            output.writeFieldBegin("consensusEndPoint", thrift.Thrift.Type.STRUCT, 3);
            this.consensusEndPoint.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TConfigNodeLocation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.configNodeId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: TEndPoint.TEndPoint = TEndPoint.TEndPoint.read(input);
                        _args.internalEndPoint = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: TEndPoint.TEndPoint = TEndPoint.TEndPoint.read(input);
                        _args.consensusEndPoint = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.configNodeId !== undefined && _args.internalEndPoint !== undefined && _args.consensusEndPoint !== undefined) {
            return new TConfigNodeLocation(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TConfigNodeLocation from input");
        }
    }
}
