/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TSStatus from "./TSStatus";
import * as TTestConnectionResult from "./TTestConnectionResult";
export interface ITTestConnectionRespArgs {
    status: TSStatus.TSStatus;
    resultList: Array<TTestConnectionResult.TTestConnectionResult>;
}
export class TTestConnectionResp {
    public status: TSStatus.TSStatus;
    public resultList: Array<TTestConnectionResult.TTestConnectionResult>;
    constructor(args: ITTestConnectionRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.resultList != null) {
            this.resultList = args.resultList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[resultList] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TTestConnectionResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.resultList != null) {
            output.writeFieldBegin("resultList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.resultList.length);
            this.resultList.forEach((value_1: TTestConnectionResult.TTestConnectionResult): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TTestConnectionResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: TSStatus.TSStatus = TSStatus.TSStatus.read(input);
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<TTestConnectionResult.TTestConnectionResult> = new Array<TTestConnectionResult.TTestConnectionResult>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: TTestConnectionResult.TTestConnectionResult = TTestConnectionResult.TTestConnectionResult.read(input);
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.resultList = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.resultList !== undefined) {
            return new TTestConnectionResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TTestConnectionResp from input");
        }
    }
}
