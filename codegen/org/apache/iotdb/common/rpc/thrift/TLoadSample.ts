/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITLoadSampleArgs {
    cpuUsageRate: number;
    memoryUsageRate: number;
    diskUsageRate: number;
    freeDiskSpace: number;
}
export class TLoadSample {
    public cpuUsageRate: number;
    public memoryUsageRate: number;
    public diskUsageRate: number;
    public freeDiskSpace: number;
    constructor(args: ITLoadSampleArgs) {
        if (args != null && args.cpuUsageRate != null) {
            this.cpuUsageRate = args.cpuUsageRate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[cpuUsageRate] is unset!");
        }
        if (args != null && args.memoryUsageRate != null) {
            this.memoryUsageRate = args.memoryUsageRate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[memoryUsageRate] is unset!");
        }
        if (args != null && args.diskUsageRate != null) {
            this.diskUsageRate = args.diskUsageRate;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[diskUsageRate] is unset!");
        }
        if (args != null && args.freeDiskSpace != null) {
            this.freeDiskSpace = args.freeDiskSpace;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[freeDiskSpace] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TLoadSample");
        if (this.cpuUsageRate != null) {
            output.writeFieldBegin("cpuUsageRate", thrift.Thrift.Type.DOUBLE, 1);
            output.writeDouble(this.cpuUsageRate);
            output.writeFieldEnd();
        }
        if (this.memoryUsageRate != null) {
            output.writeFieldBegin("memoryUsageRate", thrift.Thrift.Type.DOUBLE, 2);
            output.writeDouble(this.memoryUsageRate);
            output.writeFieldEnd();
        }
        if (this.diskUsageRate != null) {
            output.writeFieldBegin("diskUsageRate", thrift.Thrift.Type.DOUBLE, 3);
            output.writeDouble(this.diskUsageRate);
            output.writeFieldEnd();
        }
        if (this.freeDiskSpace != null) {
            output.writeFieldBegin("freeDiskSpace", thrift.Thrift.Type.DOUBLE, 4);
            output.writeDouble(this.freeDiskSpace);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TLoadSample {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_1: number = input.readDouble();
                        _args.cpuUsageRate = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_2: number = input.readDouble();
                        _args.memoryUsageRate = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_3: number = input.readDouble();
                        _args.diskUsageRate = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.DOUBLE) {
                        const value_4: number = input.readDouble();
                        _args.freeDiskSpace = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.cpuUsageRate !== undefined && _args.memoryUsageRate !== undefined && _args.diskUsageRate !== undefined && _args.freeDiskSpace !== undefined) {
            return new TLoadSample(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TLoadSample from input");
        }
    }
}
