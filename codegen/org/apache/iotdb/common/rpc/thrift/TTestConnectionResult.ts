/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TServiceProvider from "./TServiceProvider";
import * as TSender from "./TSender";
export interface ITTestConnectionResultArgs {
    serviceProvider: TServiceProvider.TServiceProvider;
    sender: TSender.TSender;
    success: boolean;
    reason?: string;
}
export class TTestConnectionResult {
    public serviceProvider: TServiceProvider.TServiceProvider;
    public sender: TSender.TSender;
    public success: boolean;
    public reason?: string;
    constructor(args: ITTestConnectionResultArgs) {
        if (args != null && args.serviceProvider != null) {
            this.serviceProvider = args.serviceProvider;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[serviceProvider] is unset!");
        }
        if (args != null && args.sender != null) {
            this.sender = args.sender;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sender] is unset!");
        }
        if (args != null && args.success != null) {
            this.success = args.success;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[success] is unset!");
        }
        if (args != null && args.reason != null) {
            this.reason = args.reason;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TTestConnectionResult");
        if (this.serviceProvider != null) {
            output.writeFieldBegin("serviceProvider", thrift.Thrift.Type.STRUCT, 1);
            this.serviceProvider.write(output);
            output.writeFieldEnd();
        }
        if (this.sender != null) {
            output.writeFieldBegin("sender", thrift.Thrift.Type.STRUCT, 2);
            this.sender.write(output);
            output.writeFieldEnd();
        }
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.success);
            output.writeFieldEnd();
        }
        if (this.reason != null) {
            output.writeFieldBegin("reason", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.reason);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TTestConnectionResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: TServiceProvider.TServiceProvider = TServiceProvider.TServiceProvider.read(input);
                        _args.serviceProvider = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: TSender.TSender = TSender.TSender.read(input);
                        _args.sender = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.success = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.reason = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.serviceProvider !== undefined && _args.sender !== undefined && _args.success !== undefined) {
            return new TTestConnectionResult(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TTestConnectionResult from input");
        }
    }
}
