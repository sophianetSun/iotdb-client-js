/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITFlushReqArgs {
    isSeq?: string;
    storageGroups?: Array<string>;
    regionIds?: Array<string>;
}
export class TFlushReq {
    public isSeq?: string;
    public storageGroups?: Array<string>;
    public regionIds?: Array<string>;
    constructor(args?: ITFlushReqArgs) {
        if (args != null && args.isSeq != null) {
            this.isSeq = args.isSeq;
        }
        if (args != null && args.storageGroups != null) {
            this.storageGroups = args.storageGroups;
        }
        if (args != null && args.regionIds != null) {
            this.regionIds = args.regionIds;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TFlushReq");
        if (this.isSeq != null) {
            output.writeFieldBegin("isSeq", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.isSeq);
            output.writeFieldEnd();
        }
        if (this.storageGroups != null) {
            output.writeFieldBegin("storageGroups", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.storageGroups.length);
            this.storageGroups.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.regionIds != null) {
            output.writeFieldBegin("regionIds", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.regionIds.length);
            this.regionIds.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TFlushReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.isSeq = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: string = input.readString();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.storageGroups = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: string = input.readString();
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.regionIds = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new TFlushReq(_args);
    }
}
