/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as ThrottleType from "./ThrottleType";
import * as TTimedQuota from "./TTimedQuota";
export interface ITThrottleQuotaArgs {
    throttleLimit?: Map<ThrottleType.ThrottleType, TTimedQuota.TTimedQuota>;
    memLimit?: number | Int64;
    cpuLimit?: number;
}
export class TThrottleQuota {
    public throttleLimit?: Map<ThrottleType.ThrottleType, TTimedQuota.TTimedQuota>;
    public memLimit?: Int64;
    public cpuLimit?: number;
    constructor(args?: ITThrottleQuotaArgs) {
        if (args != null && args.throttleLimit != null) {
            this.throttleLimit = args.throttleLimit;
        }
        if (args != null && args.memLimit != null) {
            if (typeof args.memLimit === "number") {
                this.memLimit = new Int64(args.memLimit);
            }
            else {
                this.memLimit = args.memLimit;
            }
        }
        if (args != null && args.cpuLimit != null) {
            this.cpuLimit = args.cpuLimit;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TThrottleQuota");
        if (this.throttleLimit != null) {
            output.writeFieldBegin("throttleLimit", thrift.Thrift.Type.MAP, 1);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.STRUCT, this.throttleLimit.size);
            this.throttleLimit.forEach((value_1: TTimedQuota.TTimedQuota, key_1: ThrottleType.ThrottleType): void => {
                output.writeI32(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.memLimit != null) {
            output.writeFieldBegin("memLimit", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.memLimit);
            output.writeFieldEnd();
        }
        if (this.cpuLimit != null) {
            output.writeFieldBegin("cpuLimit", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.cpuLimit);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TThrottleQuota {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_2: Map<ThrottleType.ThrottleType, TTimedQuota.TTimedQuota> = new Map<ThrottleType.ThrottleType, TTimedQuota.TTimedQuota>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: ThrottleType.ThrottleType = input.readI32();
                            const value_3: TTimedQuota.TTimedQuota = TTimedQuota.TTimedQuota.read(input);
                            value_2.set(key_2, value_3);
                        }
                        input.readMapEnd();
                        _args.throttleLimit = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.memLimit = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.cpuLimit = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new TThrottleQuota(_args);
    }
}
