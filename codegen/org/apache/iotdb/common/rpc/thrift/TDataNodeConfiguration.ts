/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TDataNodeLocation from "./TDataNodeLocation";
import * as TNodeResource from "./TNodeResource";
export interface ITDataNodeConfigurationArgs {
    location: TDataNodeLocation.TDataNodeLocation;
    resource: TNodeResource.TNodeResource;
}
export class TDataNodeConfiguration {
    public location: TDataNodeLocation.TDataNodeLocation;
    public resource: TNodeResource.TNodeResource;
    constructor(args: ITDataNodeConfigurationArgs) {
        if (args != null && args.location != null) {
            this.location = args.location;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[location] is unset!");
        }
        if (args != null && args.resource != null) {
            this.resource = args.resource;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[resource] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TDataNodeConfiguration");
        if (this.location != null) {
            output.writeFieldBegin("location", thrift.Thrift.Type.STRUCT, 1);
            this.location.write(output);
            output.writeFieldEnd();
        }
        if (this.resource != null) {
            output.writeFieldBegin("resource", thrift.Thrift.Type.STRUCT, 2);
            this.resource.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TDataNodeConfiguration {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: TDataNodeLocation.TDataNodeLocation = TDataNodeLocation.TDataNodeLocation.read(input);
                        _args.location = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: TNodeResource.TNodeResource = TNodeResource.TNodeResource.read(input);
                        _args.resource = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.location !== undefined && _args.resource !== undefined) {
            return new TDataNodeConfiguration(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TDataNodeConfiguration from input");
        }
    }
}
