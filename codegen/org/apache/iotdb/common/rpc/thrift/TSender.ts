/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TDataNodeLocation from "./TDataNodeLocation";
import * as TConfigNodeLocation from "./TConfigNodeLocation";
export interface ITSenderArgs {
    dataNodeLocation?: TDataNodeLocation.TDataNodeLocation;
    configNodeLocation?: TConfigNodeLocation.TConfigNodeLocation;
}
export class TSender {
    public dataNodeLocation?: TDataNodeLocation.TDataNodeLocation;
    public configNodeLocation?: TConfigNodeLocation.TConfigNodeLocation;
    constructor(args?: ITSenderArgs) {
        if (args != null && args.dataNodeLocation != null) {
            this.dataNodeLocation = args.dataNodeLocation;
        }
        if (args != null && args.configNodeLocation != null) {
            this.configNodeLocation = args.configNodeLocation;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSender");
        if (this.dataNodeLocation != null) {
            output.writeFieldBegin("dataNodeLocation", thrift.Thrift.Type.STRUCT, 1);
            this.dataNodeLocation.write(output);
            output.writeFieldEnd();
        }
        if (this.configNodeLocation != null) {
            output.writeFieldBegin("configNodeLocation", thrift.Thrift.Type.STRUCT, 2);
            this.configNodeLocation.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSender {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: TDataNodeLocation.TDataNodeLocation = TDataNodeLocation.TDataNodeLocation.read(input);
                        _args.dataNodeLocation = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: TConfigNodeLocation.TConfigNodeLocation = TConfigNodeLocation.TConfigNodeLocation.read(input);
                        _args.configNodeLocation = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new TSender(_args);
    }
}
