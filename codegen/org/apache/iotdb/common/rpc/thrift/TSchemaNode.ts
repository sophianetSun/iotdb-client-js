/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITSchemaNodeArgs {
    nodeName: string;
    nodeType: number;
}
export class TSchemaNode {
    public nodeName: string;
    public nodeType: number;
    constructor(args: ITSchemaNodeArgs) {
        if (args != null && args.nodeName != null) {
            this.nodeName = args.nodeName;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nodeName] is unset!");
        }
        if (args != null && args.nodeType != null) {
            this.nodeType = args.nodeType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nodeType] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSchemaNode");
        if (this.nodeName != null) {
            output.writeFieldBegin("nodeName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.nodeName);
            output.writeFieldEnd();
        }
        if (this.nodeType != null) {
            output.writeFieldBegin("nodeType", thrift.Thrift.Type.BYTE, 2);
            output.writeByte(this.nodeType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSchemaNode {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.nodeName = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BYTE) {
                        const value_2: number = input.readByte();
                        _args.nodeType = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.nodeName !== undefined && _args.nodeType !== undefined) {
            return new TSchemaNode(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSchemaNode from input");
        }
    }
}
