/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TSpaceQuota from "./TSpaceQuota";
export interface ITSetSpaceQuotaReqArgs {
    database: Array<string>;
    spaceLimit: TSpaceQuota.TSpaceQuota;
}
export class TSetSpaceQuotaReq {
    public database: Array<string>;
    public spaceLimit: TSpaceQuota.TSpaceQuota;
    constructor(args: ITSetSpaceQuotaReqArgs) {
        if (args != null && args.database != null) {
            this.database = args.database;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[database] is unset!");
        }
        if (args != null && args.spaceLimit != null) {
            this.spaceLimit = args.spaceLimit;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[spaceLimit] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSetSpaceQuotaReq");
        if (this.database != null) {
            output.writeFieldBegin("database", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.database.length);
            this.database.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.spaceLimit != null) {
            output.writeFieldBegin("spaceLimit", thrift.Thrift.Type.STRUCT, 2);
            this.spaceLimit.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSetSpaceQuotaReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_2: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_3: string = input.readString();
                            value_2.push(value_3);
                        }
                        input.readListEnd();
                        _args.database = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: TSpaceQuota.TSpaceQuota = TSpaceQuota.TSpaceQuota.read(input);
                        _args.spaceLimit = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.database !== undefined && _args.spaceLimit !== undefined) {
            return new TSetSpaceQuotaReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSetSpaceQuotaReq from input");
        }
    }
}
