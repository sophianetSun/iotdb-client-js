/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TEndPoint from "./TEndPoint";
export interface ITSStatusArgs {
    code: number;
    message?: string;
    subStatus?: Array<TSStatus>;
    redirectNode?: TEndPoint.TEndPoint;
    needRetry?: boolean;
}
export class TSStatus {
    public code: number;
    public message?: string;
    public subStatus?: Array<TSStatus>;
    public redirectNode?: TEndPoint.TEndPoint;
    public needRetry?: boolean;
    constructor(args: ITSStatusArgs) {
        if (args != null && args.code != null) {
            this.code = args.code;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[code] is unset!");
        }
        if (args != null && args.message != null) {
            this.message = args.message;
        }
        if (args != null && args.subStatus != null) {
            this.subStatus = args.subStatus;
        }
        if (args != null && args.redirectNode != null) {
            this.redirectNode = args.redirectNode;
        }
        if (args != null && args.needRetry != null) {
            this.needRetry = args.needRetry;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSStatus");
        if (this.code != null) {
            output.writeFieldBegin("code", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.code);
            output.writeFieldEnd();
        }
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        if (this.subStatus != null) {
            output.writeFieldBegin("subStatus", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.subStatus.length);
            this.subStatus.forEach((value_1: TSStatus): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.redirectNode != null) {
            output.writeFieldBegin("redirectNode", thrift.Thrift.Type.STRUCT, 4);
            this.redirectNode.write(output);
            output.writeFieldEnd();
        }
        if (this.needRetry != null) {
            output.writeFieldBegin("needRetry", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.needRetry);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSStatus {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.code = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.message = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<TSStatus> = new Array<TSStatus>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: TSStatus = TSStatus.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.subStatus = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: TEndPoint.TEndPoint = TEndPoint.TEndPoint.read(input);
                        _args.redirectNode = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.needRetry = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.code !== undefined) {
            return new TSStatus(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSStatus from input");
        }
    }
}
