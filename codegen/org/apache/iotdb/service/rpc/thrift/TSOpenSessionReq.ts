/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TSProtocolVersion from "./TSProtocolVersion";
export interface ITSOpenSessionReqArgs {
    client_protocol: TSProtocolVersion.TSProtocolVersion;
    zoneId: string;
    username: string;
    password?: string;
    configuration?: Map<string, string>;
}
export class TSOpenSessionReq {
    public client_protocol: TSProtocolVersion.TSProtocolVersion = TSProtocolVersion.TSProtocolVersion.IOTDB_SERVICE_PROTOCOL_V3;
    public zoneId: string;
    public username: string;
    public password?: string;
    public configuration?: Map<string, string>;
    constructor(args: ITSOpenSessionReqArgs) {
        if (args != null && args.client_protocol != null) {
            this.client_protocol = args.client_protocol;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[client_protocol] is unset!");
        }
        if (args != null && args.zoneId != null) {
            this.zoneId = args.zoneId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[zoneId] is unset!");
        }
        if (args != null && args.username != null) {
            this.username = args.username;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[username] is unset!");
        }
        if (args != null && args.password != null) {
            this.password = args.password;
        }
        if (args != null && args.configuration != null) {
            this.configuration = args.configuration;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSOpenSessionReq");
        if (this.client_protocol != null) {
            output.writeFieldBegin("client_protocol", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.client_protocol);
            output.writeFieldEnd();
        }
        if (this.zoneId != null) {
            output.writeFieldBegin("zoneId", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.zoneId);
            output.writeFieldEnd();
        }
        if (this.username != null) {
            output.writeFieldBegin("username", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.username);
            output.writeFieldEnd();
        }
        if (this.password != null) {
            output.writeFieldBegin("password", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.password);
            output.writeFieldEnd();
        }
        if (this.configuration != null) {
            output.writeFieldBegin("configuration", thrift.Thrift.Type.MAP, 5);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.configuration.size);
            this.configuration.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSOpenSessionReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: TSProtocolVersion.TSProtocolVersion = input.readI32();
                        _args.client_protocol = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.zoneId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.username = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.password = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_6: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_7: string = input.readString();
                            value_6.set(key_2, value_7);
                        }
                        input.readMapEnd();
                        _args.configuration = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.client_protocol !== undefined && _args.zoneId !== undefined && _args.username !== undefined) {
            return new TSOpenSessionReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSOpenSessionReq from input");
        }
    }
}
