/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSInsertStringRecordsOfOneDeviceReqArgs {
    sessionId: number | Int64;
    prefixPath: string;
    measurementsList: Array<Array<string>>;
    valuesList: Array<Array<string>>;
    timestamps: Array<number | Int64>;
    isAligned?: boolean;
}
export class TSInsertStringRecordsOfOneDeviceReq {
    public sessionId: Int64;
    public prefixPath: string;
    public measurementsList: Array<Array<string>>;
    public valuesList: Array<Array<string>>;
    public timestamps: Array<Int64>;
    public isAligned?: boolean;
    constructor(args: ITSInsertStringRecordsOfOneDeviceReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.prefixPath != null) {
            this.prefixPath = args.prefixPath;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[prefixPath] is unset!");
        }
        if (args != null && args.measurementsList != null) {
            this.measurementsList = args.measurementsList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[measurementsList] is unset!");
        }
        if (args != null && args.valuesList != null) {
            this.valuesList = args.valuesList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[valuesList] is unset!");
        }
        if (args != null && args.timestamps != null) {
            this.timestamps = args.timestamps;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timestamps] is unset!");
        }
        if (args != null && args.isAligned != null) {
            this.isAligned = args.isAligned;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSInsertStringRecordsOfOneDeviceReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.prefixPath != null) {
            output.writeFieldBegin("prefixPath", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.prefixPath);
            output.writeFieldEnd();
        }
        if (this.measurementsList != null) {
            output.writeFieldBegin("measurementsList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.LIST, this.measurementsList.length);
            this.measurementsList.forEach((value_1: Array<string>): void => {
                output.writeListBegin(thrift.Thrift.Type.STRING, value_1.length);
                value_1.forEach((value_2: string): void => {
                    output.writeString(value_2);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.valuesList != null) {
            output.writeFieldBegin("valuesList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.LIST, this.valuesList.length);
            this.valuesList.forEach((value_3: Array<string>): void => {
                output.writeListBegin(thrift.Thrift.Type.STRING, value_3.length);
                value_3.forEach((value_4: string): void => {
                    output.writeString(value_4);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.timestamps != null) {
            output.writeFieldBegin("timestamps", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.I64, this.timestamps.length);
            this.timestamps.forEach((value_5: Int64): void => {
                output.writeI64(value_5);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.isAligned != null) {
            output.writeFieldBegin("isAligned", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.isAligned);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSInsertStringRecordsOfOneDeviceReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.sessionId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.prefixPath = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<Array<string>> = new Array<Array<string>>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: Array<string> = new Array<string>();
                            const metadata_2: thrift.TList = input.readListBegin();
                            const size_2: number = metadata_2.size;
                            for (let i_2: number = 0; i_2 < size_2; i_2++) {
                                const value_10: string = input.readString();
                                value_9.push(value_10);
                            }
                            input.readListEnd();
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.measurementsList = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<Array<string>> = new Array<Array<string>>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_12: Array<string> = new Array<string>();
                            const metadata_4: thrift.TList = input.readListBegin();
                            const size_4: number = metadata_4.size;
                            for (let i_4: number = 0; i_4 < size_4; i_4++) {
                                const value_13: string = input.readString();
                                value_12.push(value_13);
                            }
                            input.readListEnd();
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.valuesList = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<Int64> = new Array<Int64>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_15: Int64 = input.readI64();
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.timestamps = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_16: boolean = input.readBool();
                        _args.isAligned = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.prefixPath !== undefined && _args.measurementsList !== undefined && _args.valuesList !== undefined && _args.timestamps !== undefined) {
            return new TSInsertStringRecordsOfOneDeviceReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSInsertStringRecordsOfOneDeviceReq from input");
        }
    }
}
