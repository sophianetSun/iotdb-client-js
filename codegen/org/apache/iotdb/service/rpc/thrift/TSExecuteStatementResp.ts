/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
import * as TSQueryDataSet from "./TSQueryDataSet";
import * as TSQueryNonAlignDataSet from "./TSQueryNonAlignDataSet";
import * as TSTracingInfo from "./TSTracingInfo";
export interface ITSExecuteStatementRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    queryId?: number | Int64;
    columns?: Array<string>;
    operationType?: string;
    ignoreTimeStamp?: boolean;
    dataTypeList?: Array<string>;
    queryDataSet?: TSQueryDataSet.TSQueryDataSet;
    nonAlignQueryDataSet?: TSQueryNonAlignDataSet.TSQueryNonAlignDataSet;
    columnNameIndexMap?: Map<string, number>;
    sgColumns?: Array<string>;
    aliasColumns?: Array<number>;
    tracingInfo?: TSTracingInfo.TSTracingInfo;
    queryResult?: Array<Buffer>;
    moreData?: boolean;
    database?: string;
    tableModel?: boolean;
    columnIndex2TsBlockColumnIndexList?: Array<number>;
}
export class TSExecuteStatementResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public queryId?: Int64;
    public columns?: Array<string>;
    public operationType?: string;
    public ignoreTimeStamp?: boolean;
    public dataTypeList?: Array<string>;
    public queryDataSet?: TSQueryDataSet.TSQueryDataSet;
    public nonAlignQueryDataSet?: TSQueryNonAlignDataSet.TSQueryNonAlignDataSet;
    public columnNameIndexMap?: Map<string, number>;
    public sgColumns?: Array<string>;
    public aliasColumns?: Array<number>;
    public tracingInfo?: TSTracingInfo.TSTracingInfo;
    public queryResult?: Array<Buffer>;
    public moreData?: boolean;
    public database?: string;
    public tableModel?: boolean;
    public columnIndex2TsBlockColumnIndexList?: Array<number>;
    constructor(args: ITSExecuteStatementRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.queryId != null) {
            if (typeof args.queryId === "number") {
                this.queryId = new Int64(args.queryId);
            }
            else {
                this.queryId = args.queryId;
            }
        }
        if (args != null && args.columns != null) {
            this.columns = args.columns;
        }
        if (args != null && args.operationType != null) {
            this.operationType = args.operationType;
        }
        if (args != null && args.ignoreTimeStamp != null) {
            this.ignoreTimeStamp = args.ignoreTimeStamp;
        }
        if (args != null && args.dataTypeList != null) {
            this.dataTypeList = args.dataTypeList;
        }
        if (args != null && args.queryDataSet != null) {
            this.queryDataSet = args.queryDataSet;
        }
        if (args != null && args.nonAlignQueryDataSet != null) {
            this.nonAlignQueryDataSet = args.nonAlignQueryDataSet;
        }
        if (args != null && args.columnNameIndexMap != null) {
            this.columnNameIndexMap = args.columnNameIndexMap;
        }
        if (args != null && args.sgColumns != null) {
            this.sgColumns = args.sgColumns;
        }
        if (args != null && args.aliasColumns != null) {
            this.aliasColumns = args.aliasColumns;
        }
        if (args != null && args.tracingInfo != null) {
            this.tracingInfo = args.tracingInfo;
        }
        if (args != null && args.queryResult != null) {
            this.queryResult = args.queryResult;
        }
        if (args != null && args.moreData != null) {
            this.moreData = args.moreData;
        }
        if (args != null && args.database != null) {
            this.database = args.database;
        }
        if (args != null && args.tableModel != null) {
            this.tableModel = args.tableModel;
        }
        if (args != null && args.columnIndex2TsBlockColumnIndexList != null) {
            this.columnIndex2TsBlockColumnIndexList = args.columnIndex2TsBlockColumnIndexList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSExecuteStatementResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.queryId != null) {
            output.writeFieldBegin("queryId", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.queryId);
            output.writeFieldEnd();
        }
        if (this.columns != null) {
            output.writeFieldBegin("columns", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.columns.length);
            this.columns.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.operationType != null) {
            output.writeFieldBegin("operationType", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.operationType);
            output.writeFieldEnd();
        }
        if (this.ignoreTimeStamp != null) {
            output.writeFieldBegin("ignoreTimeStamp", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.ignoreTimeStamp);
            output.writeFieldEnd();
        }
        if (this.dataTypeList != null) {
            output.writeFieldBegin("dataTypeList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.dataTypeList.length);
            this.dataTypeList.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.queryDataSet != null) {
            output.writeFieldBegin("queryDataSet", thrift.Thrift.Type.STRUCT, 7);
            this.queryDataSet.write(output);
            output.writeFieldEnd();
        }
        if (this.nonAlignQueryDataSet != null) {
            output.writeFieldBegin("nonAlignQueryDataSet", thrift.Thrift.Type.STRUCT, 8);
            this.nonAlignQueryDataSet.write(output);
            output.writeFieldEnd();
        }
        if (this.columnNameIndexMap != null) {
            output.writeFieldBegin("columnNameIndexMap", thrift.Thrift.Type.MAP, 9);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.I32, this.columnNameIndexMap.size);
            this.columnNameIndexMap.forEach((value_3: number, key_1: string): void => {
                output.writeString(key_1);
                output.writeI32(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.sgColumns != null) {
            output.writeFieldBegin("sgColumns", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.sgColumns.length);
            this.sgColumns.forEach((value_4: string): void => {
                output.writeString(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.aliasColumns != null) {
            output.writeFieldBegin("aliasColumns", thrift.Thrift.Type.LIST, 11);
            output.writeListBegin(thrift.Thrift.Type.BYTE, this.aliasColumns.length);
            this.aliasColumns.forEach((value_5: number): void => {
                output.writeByte(value_5);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.tracingInfo != null) {
            output.writeFieldBegin("tracingInfo", thrift.Thrift.Type.STRUCT, 12);
            this.tracingInfo.write(output);
            output.writeFieldEnd();
        }
        if (this.queryResult != null) {
            output.writeFieldBegin("queryResult", thrift.Thrift.Type.LIST, 13);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.queryResult.length);
            this.queryResult.forEach((value_6: Buffer): void => {
                output.writeBinary(value_6);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.moreData != null) {
            output.writeFieldBegin("moreData", thrift.Thrift.Type.BOOL, 14);
            output.writeBool(this.moreData);
            output.writeFieldEnd();
        }
        if (this.database != null) {
            output.writeFieldBegin("database", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.database);
            output.writeFieldEnd();
        }
        if (this.tableModel != null) {
            output.writeFieldBegin("tableModel", thrift.Thrift.Type.BOOL, 16);
            output.writeBool(this.tableModel);
            output.writeFieldEnd();
        }
        if (this.columnIndex2TsBlockColumnIndexList != null) {
            output.writeFieldBegin("columnIndex2TsBlockColumnIndexList", thrift.Thrift.Type.LIST, 17);
            output.writeListBegin(thrift.Thrift.Type.I32, this.columnIndex2TsBlockColumnIndexList.length);
            this.columnIndex2TsBlockColumnIndexList.forEach((value_7: number): void => {
                output.writeI32(value_7);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSExecuteStatementResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_8: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.queryId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.columns = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.operationType = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.ignoreTimeStamp = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_15: string = input.readString();
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.dataTypeList = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: TSQueryDataSet.TSQueryDataSet = TSQueryDataSet.TSQueryDataSet.read(input);
                        _args.queryDataSet = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_17: TSQueryNonAlignDataSet.TSQueryNonAlignDataSet = TSQueryNonAlignDataSet.TSQueryNonAlignDataSet.read(input);
                        _args.nonAlignQueryDataSet = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_18: Map<string, number> = new Map<string, number>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_2: string = input.readString();
                            const value_19: number = input.readI32();
                            value_18.set(key_2, value_19);
                        }
                        input.readMapEnd();
                        _args.columnNameIndexMap = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_20: Array<string> = new Array<string>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_21: string = input.readString();
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.sgColumns = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_22: Array<number> = new Array<number>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_23: number = input.readByte();
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.aliasColumns = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_24: TSTracingInfo.TSTracingInfo = TSTracingInfo.TSTracingInfo.read(input);
                        _args.tracingInfo = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_25: Array<Buffer> = new Array<Buffer>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_26: Buffer = input.readBinary();
                            value_25.push(value_26);
                        }
                        input.readListEnd();
                        _args.queryResult = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_27: boolean = input.readBool();
                        _args.moreData = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_28: string = input.readString();
                        _args.database = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_29: boolean = input.readBool();
                        _args.tableModel = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_30: Array<number> = new Array<number>();
                        const metadata_7: thrift.TList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_31: number = input.readI32();
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.columnIndex2TsBlockColumnIndexList = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined) {
            return new TSExecuteStatementResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSExecuteStatementResp from input");
        }
    }
}
