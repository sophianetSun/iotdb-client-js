/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSInsertTabletReqArgs {
    sessionId: number | Int64;
    prefixPath: string;
    measurements: Array<string>;
    values: Buffer;
    timestamps: Buffer;
    types: Array<number>;
    size: number;
    isAligned?: boolean;
    writeToTable?: boolean;
    columnCategories?: Array<number>;
}
export class TSInsertTabletReq {
    public sessionId: Int64;
    public prefixPath: string;
    public measurements: Array<string>;
    public values: Buffer;
    public timestamps: Buffer;
    public types: Array<number>;
    public size: number;
    public isAligned?: boolean;
    public writeToTable?: boolean;
    public columnCategories?: Array<number>;
    constructor(args: ITSInsertTabletReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.prefixPath != null) {
            this.prefixPath = args.prefixPath;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[prefixPath] is unset!");
        }
        if (args != null && args.measurements != null) {
            this.measurements = args.measurements;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[measurements] is unset!");
        }
        if (args != null && args.values != null) {
            this.values = args.values;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[values] is unset!");
        }
        if (args != null && args.timestamps != null) {
            this.timestamps = args.timestamps;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timestamps] is unset!");
        }
        if (args != null && args.types != null) {
            this.types = args.types;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[types] is unset!");
        }
        if (args != null && args.size != null) {
            this.size = args.size;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[size] is unset!");
        }
        if (args != null && args.isAligned != null) {
            this.isAligned = args.isAligned;
        }
        if (args != null && args.writeToTable != null) {
            this.writeToTable = args.writeToTable;
        }
        if (args != null && args.columnCategories != null) {
            this.columnCategories = args.columnCategories;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSInsertTabletReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.prefixPath != null) {
            output.writeFieldBegin("prefixPath", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.prefixPath);
            output.writeFieldEnd();
        }
        if (this.measurements != null) {
            output.writeFieldBegin("measurements", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.measurements.length);
            this.measurements.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.values != null) {
            output.writeFieldBegin("values", thrift.Thrift.Type.STRING, 4);
            output.writeBinary(this.values);
            output.writeFieldEnd();
        }
        if (this.timestamps != null) {
            output.writeFieldBegin("timestamps", thrift.Thrift.Type.STRING, 5);
            output.writeBinary(this.timestamps);
            output.writeFieldEnd();
        }
        if (this.types != null) {
            output.writeFieldBegin("types", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.I32, this.types.length);
            this.types.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.size != null) {
            output.writeFieldBegin("size", thrift.Thrift.Type.I32, 7);
            output.writeI32(this.size);
            output.writeFieldEnd();
        }
        if (this.isAligned != null) {
            output.writeFieldBegin("isAligned", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.isAligned);
            output.writeFieldEnd();
        }
        if (this.writeToTable != null) {
            output.writeFieldBegin("writeToTable", thrift.Thrift.Type.BOOL, 9);
            output.writeBool(this.writeToTable);
            output.writeFieldEnd();
        }
        if (this.columnCategories != null) {
            output.writeFieldBegin("columnCategories", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.BYTE, this.columnCategories.length);
            this.columnCategories.forEach((value_3: number): void => {
                output.writeByte(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSInsertTabletReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.sessionId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.prefixPath = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: string = input.readString();
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.measurements = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_8: Buffer = input.readBinary();
                        _args.values = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: Buffer = input.readBinary();
                        _args.timestamps = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<number> = new Array<number>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: number = input.readI32();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.types = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: number = input.readI32();
                        _args.size = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_13: boolean = input.readBool();
                        _args.isAligned = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_14: boolean = input.readBool();
                        _args.writeToTable = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_15: Array<number> = new Array<number>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_16: number = input.readByte();
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.columnCategories = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.prefixPath !== undefined && _args.measurements !== undefined && _args.values !== undefined && _args.timestamps !== undefined && _args.types !== undefined && _args.size !== undefined) {
            return new TSInsertTabletReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSInsertTabletReq from input");
        }
    }
}
