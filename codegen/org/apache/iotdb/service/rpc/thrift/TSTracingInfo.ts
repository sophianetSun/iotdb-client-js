/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSTracingInfoArgs {
    activityList: Array<string>;
    elapsedTimeList: Array<number | Int64>;
    seriesPathNum?: number;
    seqFileNum?: number;
    unSeqFileNum?: number;
    sequenceChunkNum?: number;
    sequenceChunkPointNum?: number | Int64;
    unsequenceChunkNum?: number;
    unsequenceChunkPointNum?: number | Int64;
    totalPageNum?: number;
    overlappedPageNum?: number;
}
export class TSTracingInfo {
    public activityList: Array<string>;
    public elapsedTimeList: Array<Int64>;
    public seriesPathNum?: number;
    public seqFileNum?: number;
    public unSeqFileNum?: number;
    public sequenceChunkNum?: number;
    public sequenceChunkPointNum?: Int64;
    public unsequenceChunkNum?: number;
    public unsequenceChunkPointNum?: Int64;
    public totalPageNum?: number;
    public overlappedPageNum?: number;
    constructor(args: ITSTracingInfoArgs) {
        if (args != null && args.activityList != null) {
            this.activityList = args.activityList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[activityList] is unset!");
        }
        if (args != null && args.elapsedTimeList != null) {
            this.elapsedTimeList = args.elapsedTimeList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[elapsedTimeList] is unset!");
        }
        if (args != null && args.seriesPathNum != null) {
            this.seriesPathNum = args.seriesPathNum;
        }
        if (args != null && args.seqFileNum != null) {
            this.seqFileNum = args.seqFileNum;
        }
        if (args != null && args.unSeqFileNum != null) {
            this.unSeqFileNum = args.unSeqFileNum;
        }
        if (args != null && args.sequenceChunkNum != null) {
            this.sequenceChunkNum = args.sequenceChunkNum;
        }
        if (args != null && args.sequenceChunkPointNum != null) {
            if (typeof args.sequenceChunkPointNum === "number") {
                this.sequenceChunkPointNum = new Int64(args.sequenceChunkPointNum);
            }
            else {
                this.sequenceChunkPointNum = args.sequenceChunkPointNum;
            }
        }
        if (args != null && args.unsequenceChunkNum != null) {
            this.unsequenceChunkNum = args.unsequenceChunkNum;
        }
        if (args != null && args.unsequenceChunkPointNum != null) {
            if (typeof args.unsequenceChunkPointNum === "number") {
                this.unsequenceChunkPointNum = new Int64(args.unsequenceChunkPointNum);
            }
            else {
                this.unsequenceChunkPointNum = args.unsequenceChunkPointNum;
            }
        }
        if (args != null && args.totalPageNum != null) {
            this.totalPageNum = args.totalPageNum;
        }
        if (args != null && args.overlappedPageNum != null) {
            this.overlappedPageNum = args.overlappedPageNum;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSTracingInfo");
        if (this.activityList != null) {
            output.writeFieldBegin("activityList", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.activityList.length);
            this.activityList.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.elapsedTimeList != null) {
            output.writeFieldBegin("elapsedTimeList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.I64, this.elapsedTimeList.length);
            this.elapsedTimeList.forEach((value_2: Int64): void => {
                output.writeI64(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.seriesPathNum != null) {
            output.writeFieldBegin("seriesPathNum", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.seriesPathNum);
            output.writeFieldEnd();
        }
        if (this.seqFileNum != null) {
            output.writeFieldBegin("seqFileNum", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.seqFileNum);
            output.writeFieldEnd();
        }
        if (this.unSeqFileNum != null) {
            output.writeFieldBegin("unSeqFileNum", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.unSeqFileNum);
            output.writeFieldEnd();
        }
        if (this.sequenceChunkNum != null) {
            output.writeFieldBegin("sequenceChunkNum", thrift.Thrift.Type.I32, 6);
            output.writeI32(this.sequenceChunkNum);
            output.writeFieldEnd();
        }
        if (this.sequenceChunkPointNum != null) {
            output.writeFieldBegin("sequenceChunkPointNum", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.sequenceChunkPointNum);
            output.writeFieldEnd();
        }
        if (this.unsequenceChunkNum != null) {
            output.writeFieldBegin("unsequenceChunkNum", thrift.Thrift.Type.I32, 8);
            output.writeI32(this.unsequenceChunkNum);
            output.writeFieldEnd();
        }
        if (this.unsequenceChunkPointNum != null) {
            output.writeFieldBegin("unsequenceChunkPointNum", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.unsequenceChunkPointNum);
            output.writeFieldEnd();
        }
        if (this.totalPageNum != null) {
            output.writeFieldBegin("totalPageNum", thrift.Thrift.Type.I32, 10);
            output.writeI32(this.totalPageNum);
            output.writeFieldEnd();
        }
        if (this.overlappedPageNum != null) {
            output.writeFieldBegin("overlappedPageNum", thrift.Thrift.Type.I32, 11);
            output.writeI32(this.overlappedPageNum);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSTracingInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: string = input.readString();
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.activityList = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<Int64> = new Array<Int64>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_6: Int64 = input.readI64();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.elapsedTimeList = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.seriesPathNum = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.seqFileNum = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_9: number = input.readI32();
                        _args.unSeqFileNum = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_10: number = input.readI32();
                        _args.sequenceChunkNum = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.sequenceChunkPointNum = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_12: number = input.readI32();
                        _args.unsequenceChunkNum = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_13: Int64 = input.readI64();
                        _args.unsequenceChunkPointNum = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_14: number = input.readI32();
                        _args.totalPageNum = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_15: number = input.readI32();
                        _args.overlappedPageNum = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.activityList !== undefined && _args.elapsedTimeList !== undefined) {
            return new TSTracingInfo(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSTracingInfo from input");
        }
    }
}
