/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITSQueryTemplateRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    queryType: number;
    result?: boolean;
    count?: number;
    measurements?: Array<string>;
}
export class TSQueryTemplateResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public queryType: number;
    public result?: boolean;
    public count?: number;
    public measurements?: Array<string>;
    constructor(args: ITSQueryTemplateRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.queryType != null) {
            this.queryType = args.queryType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[queryType] is unset!");
        }
        if (args != null && args.result != null) {
            this.result = args.result;
        }
        if (args != null && args.count != null) {
            this.count = args.count;
        }
        if (args != null && args.measurements != null) {
            this.measurements = args.measurements;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSQueryTemplateResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.queryType != null) {
            output.writeFieldBegin("queryType", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.queryType);
            output.writeFieldEnd();
        }
        if (this.result != null) {
            output.writeFieldBegin("result", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.result);
            output.writeFieldEnd();
        }
        if (this.count != null) {
            output.writeFieldBegin("count", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.count);
            output.writeFieldEnd();
        }
        if (this.measurements != null) {
            output.writeFieldBegin("measurements", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.measurements.length);
            this.measurements.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSQueryTemplateResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.queryType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.result = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_5: number = input.readI32();
                        _args.count = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_7: string = input.readString();
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.measurements = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.queryType !== undefined) {
            return new TSQueryTemplateResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSQueryTemplateResp from input");
        }
    }
}
