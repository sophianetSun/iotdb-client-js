/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSCreateAlignedTimeseriesReqArgs {
    sessionId: number | Int64;
    prefixPath: string;
    measurements: Array<string>;
    dataTypes: Array<number>;
    encodings: Array<number>;
    compressors: Array<number>;
    measurementAlias?: Array<string>;
    tagsList?: Array<Map<string, string>>;
    attributesList?: Array<Map<string, string>>;
}
export class TSCreateAlignedTimeseriesReq {
    public sessionId: Int64;
    public prefixPath: string;
    public measurements: Array<string>;
    public dataTypes: Array<number>;
    public encodings: Array<number>;
    public compressors: Array<number>;
    public measurementAlias?: Array<string>;
    public tagsList?: Array<Map<string, string>>;
    public attributesList?: Array<Map<string, string>>;
    constructor(args: ITSCreateAlignedTimeseriesReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.prefixPath != null) {
            this.prefixPath = args.prefixPath;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[prefixPath] is unset!");
        }
        if (args != null && args.measurements != null) {
            this.measurements = args.measurements;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[measurements] is unset!");
        }
        if (args != null && args.dataTypes != null) {
            this.dataTypes = args.dataTypes;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dataTypes] is unset!");
        }
        if (args != null && args.encodings != null) {
            this.encodings = args.encodings;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[encodings] is unset!");
        }
        if (args != null && args.compressors != null) {
            this.compressors = args.compressors;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[compressors] is unset!");
        }
        if (args != null && args.measurementAlias != null) {
            this.measurementAlias = args.measurementAlias;
        }
        if (args != null && args.tagsList != null) {
            this.tagsList = args.tagsList;
        }
        if (args != null && args.attributesList != null) {
            this.attributesList = args.attributesList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSCreateAlignedTimeseriesReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.prefixPath != null) {
            output.writeFieldBegin("prefixPath", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.prefixPath);
            output.writeFieldEnd();
        }
        if (this.measurements != null) {
            output.writeFieldBegin("measurements", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.measurements.length);
            this.measurements.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.dataTypes != null) {
            output.writeFieldBegin("dataTypes", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.I32, this.dataTypes.length);
            this.dataTypes.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.encodings != null) {
            output.writeFieldBegin("encodings", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.I32, this.encodings.length);
            this.encodings.forEach((value_3: number): void => {
                output.writeI32(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.compressors != null) {
            output.writeFieldBegin("compressors", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.I32, this.compressors.length);
            this.compressors.forEach((value_4: number): void => {
                output.writeI32(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.measurementAlias != null) {
            output.writeFieldBegin("measurementAlias", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.measurementAlias.length);
            this.measurementAlias.forEach((value_5: string): void => {
                output.writeString(value_5);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.tagsList != null) {
            output.writeFieldBegin("tagsList", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.MAP, this.tagsList.length);
            this.tagsList.forEach((value_6: Map<string, string>): void => {
                output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, value_6.size);
                value_6.forEach((value_7: string, key_1: string): void => {
                    output.writeString(key_1);
                    output.writeString(value_7);
                });
                output.writeMapEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.attributesList != null) {
            output.writeFieldBegin("attributesList", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.MAP, this.attributesList.length);
            this.attributesList.forEach((value_8: Map<string, string>): void => {
                output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, value_8.size);
                value_8.forEach((value_9: string, key_2: string): void => {
                    output.writeString(key_2);
                    output.writeString(value_9);
                });
                output.writeMapEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSCreateAlignedTimeseriesReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.sessionId = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_11: string = input.readString();
                        _args.prefixPath = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_13: string = input.readString();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.measurements = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<number> = new Array<number>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_15: number = input.readI32();
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.dataTypes = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_16: Array<number> = new Array<number>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_17: number = input.readI32();
                            value_16.push(value_17);
                        }
                        input.readListEnd();
                        _args.encodings = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_18: Array<number> = new Array<number>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_19: number = input.readI32();
                            value_18.push(value_19);
                        }
                        input.readListEnd();
                        _args.compressors = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_20: Array<string> = new Array<string>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_21: string = input.readString();
                            value_20.push(value_21);
                        }
                        input.readListEnd();
                        _args.measurementAlias = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_22: Array<Map<string, string>> = new Array<Map<string, string>>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_23: Map<string, string> = new Map<string, string>();
                            const metadata_7: thrift.TMap = input.readMapBegin();
                            const size_7: number = metadata_7.size;
                            for (let i_7: number = 0; i_7 < size_7; i_7++) {
                                const key_3: string = input.readString();
                                const value_24: string = input.readString();
                                value_23.set(key_3, value_24);
                            }
                            input.readMapEnd();
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.tagsList = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_25: Array<Map<string, string>> = new Array<Map<string, string>>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_26: Map<string, string> = new Map<string, string>();
                            const metadata_9: thrift.TMap = input.readMapBegin();
                            const size_9: number = metadata_9.size;
                            for (let i_9: number = 0; i_9 < size_9; i_9++) {
                                const key_4: string = input.readString();
                                const value_27: string = input.readString();
                                value_26.set(key_4, value_27);
                            }
                            input.readMapEnd();
                            value_25.push(value_26);
                        }
                        input.readListEnd();
                        _args.attributesList = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.prefixPath !== undefined && _args.measurements !== undefined && _args.dataTypes !== undefined && _args.encodings !== undefined && _args.compressors !== undefined) {
            return new TSCreateAlignedTimeseriesReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSCreateAlignedTimeseriesReq from input");
        }
    }
}
