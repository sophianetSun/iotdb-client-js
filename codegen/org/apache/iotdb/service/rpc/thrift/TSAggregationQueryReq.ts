/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITSAggregationQueryReqArgs {
    sessionId: number | Int64;
    statementId: number | Int64;
    paths: Array<string>;
    aggregations: Array<org_apache_iotdb_common_rpc_thrift.TAggregationType>;
    startTime?: number | Int64;
    endTime?: number | Int64;
    interval?: number | Int64;
    slidingStep?: number | Int64;
    fetchSize?: number;
    timeout?: number | Int64;
    legalPathNodes?: boolean;
}
export class TSAggregationQueryReq {
    public sessionId: Int64;
    public statementId: Int64;
    public paths: Array<string>;
    public aggregations: Array<org_apache_iotdb_common_rpc_thrift.TAggregationType>;
    public startTime?: Int64;
    public endTime?: Int64;
    public interval?: Int64;
    public slidingStep?: Int64;
    public fetchSize?: number;
    public timeout?: Int64;
    public legalPathNodes?: boolean;
    constructor(args: ITSAggregationQueryReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.statementId != null) {
            if (typeof args.statementId === "number") {
                this.statementId = new Int64(args.statementId);
            }
            else {
                this.statementId = args.statementId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[statementId] is unset!");
        }
        if (args != null && args.paths != null) {
            this.paths = args.paths;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[paths] is unset!");
        }
        if (args != null && args.aggregations != null) {
            this.aggregations = args.aggregations;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[aggregations] is unset!");
        }
        if (args != null && args.startTime != null) {
            if (typeof args.startTime === "number") {
                this.startTime = new Int64(args.startTime);
            }
            else {
                this.startTime = args.startTime;
            }
        }
        if (args != null && args.endTime != null) {
            if (typeof args.endTime === "number") {
                this.endTime = new Int64(args.endTime);
            }
            else {
                this.endTime = args.endTime;
            }
        }
        if (args != null && args.interval != null) {
            if (typeof args.interval === "number") {
                this.interval = new Int64(args.interval);
            }
            else {
                this.interval = args.interval;
            }
        }
        if (args != null && args.slidingStep != null) {
            if (typeof args.slidingStep === "number") {
                this.slidingStep = new Int64(args.slidingStep);
            }
            else {
                this.slidingStep = args.slidingStep;
            }
        }
        if (args != null && args.fetchSize != null) {
            this.fetchSize = args.fetchSize;
        }
        if (args != null && args.timeout != null) {
            if (typeof args.timeout === "number") {
                this.timeout = new Int64(args.timeout);
            }
            else {
                this.timeout = args.timeout;
            }
        }
        if (args != null && args.legalPathNodes != null) {
            this.legalPathNodes = args.legalPathNodes;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSAggregationQueryReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.statementId != null) {
            output.writeFieldBegin("statementId", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.statementId);
            output.writeFieldEnd();
        }
        if (this.paths != null) {
            output.writeFieldBegin("paths", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.paths.length);
            this.paths.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.aggregations != null) {
            output.writeFieldBegin("aggregations", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.I32, this.aggregations.length);
            this.aggregations.forEach((value_2: org_apache_iotdb_common_rpc_thrift.TAggregationType): void => {
                output.writeI32(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.startTime != null) {
            output.writeFieldBegin("startTime", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.startTime);
            output.writeFieldEnd();
        }
        if (this.endTime != null) {
            output.writeFieldBegin("endTime", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.endTime);
            output.writeFieldEnd();
        }
        if (this.interval != null) {
            output.writeFieldBegin("interval", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.interval);
            output.writeFieldEnd();
        }
        if (this.slidingStep != null) {
            output.writeFieldBegin("slidingStep", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.slidingStep);
            output.writeFieldEnd();
        }
        if (this.fetchSize != null) {
            output.writeFieldBegin("fetchSize", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.fetchSize);
            output.writeFieldEnd();
        }
        if (this.timeout != null) {
            output.writeFieldBegin("timeout", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.timeout);
            output.writeFieldEnd();
        }
        if (this.legalPathNodes != null) {
            output.writeFieldBegin("legalPathNodes", thrift.Thrift.Type.BOOL, 11);
            output.writeBool(this.legalPathNodes);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSAggregationQueryReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.sessionId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.statementId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: string = input.readString();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.paths = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<org_apache_iotdb_common_rpc_thrift.TAggregationType> = new Array<org_apache_iotdb_common_rpc_thrift.TAggregationType>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_8: org_apache_iotdb_common_rpc_thrift.TAggregationType = input.readI32();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.aggregations = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.startTime = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.endTime = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.interval = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_12: Int64 = input.readI64();
                        _args.slidingStep = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_13: number = input.readI32();
                        _args.fetchSize = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.timeout = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.legalPathNodes = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.statementId !== undefined && _args.paths !== undefined && _args.aggregations !== undefined) {
            return new TSAggregationQueryReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSAggregationQueryReq from input");
        }
    }
}
