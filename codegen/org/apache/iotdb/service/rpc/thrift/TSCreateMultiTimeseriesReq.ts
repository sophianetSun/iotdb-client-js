/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSCreateMultiTimeseriesReqArgs {
    sessionId: number | Int64;
    paths: Array<string>;
    dataTypes: Array<number>;
    encodings: Array<number>;
    compressors: Array<number>;
    propsList?: Array<Map<string, string>>;
    tagsList?: Array<Map<string, string>>;
    attributesList?: Array<Map<string, string>>;
    measurementAliasList?: Array<string>;
}
export class TSCreateMultiTimeseriesReq {
    public sessionId: Int64;
    public paths: Array<string>;
    public dataTypes: Array<number>;
    public encodings: Array<number>;
    public compressors: Array<number>;
    public propsList?: Array<Map<string, string>>;
    public tagsList?: Array<Map<string, string>>;
    public attributesList?: Array<Map<string, string>>;
    public measurementAliasList?: Array<string>;
    constructor(args: ITSCreateMultiTimeseriesReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.paths != null) {
            this.paths = args.paths;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[paths] is unset!");
        }
        if (args != null && args.dataTypes != null) {
            this.dataTypes = args.dataTypes;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dataTypes] is unset!");
        }
        if (args != null && args.encodings != null) {
            this.encodings = args.encodings;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[encodings] is unset!");
        }
        if (args != null && args.compressors != null) {
            this.compressors = args.compressors;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[compressors] is unset!");
        }
        if (args != null && args.propsList != null) {
            this.propsList = args.propsList;
        }
        if (args != null && args.tagsList != null) {
            this.tagsList = args.tagsList;
        }
        if (args != null && args.attributesList != null) {
            this.attributesList = args.attributesList;
        }
        if (args != null && args.measurementAliasList != null) {
            this.measurementAliasList = args.measurementAliasList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSCreateMultiTimeseriesReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.paths != null) {
            output.writeFieldBegin("paths", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.paths.length);
            this.paths.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.dataTypes != null) {
            output.writeFieldBegin("dataTypes", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.I32, this.dataTypes.length);
            this.dataTypes.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.encodings != null) {
            output.writeFieldBegin("encodings", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.I32, this.encodings.length);
            this.encodings.forEach((value_3: number): void => {
                output.writeI32(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.compressors != null) {
            output.writeFieldBegin("compressors", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.I32, this.compressors.length);
            this.compressors.forEach((value_4: number): void => {
                output.writeI32(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.propsList != null) {
            output.writeFieldBegin("propsList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.MAP, this.propsList.length);
            this.propsList.forEach((value_5: Map<string, string>): void => {
                output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, value_5.size);
                value_5.forEach((value_6: string, key_1: string): void => {
                    output.writeString(key_1);
                    output.writeString(value_6);
                });
                output.writeMapEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.tagsList != null) {
            output.writeFieldBegin("tagsList", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.MAP, this.tagsList.length);
            this.tagsList.forEach((value_7: Map<string, string>): void => {
                output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, value_7.size);
                value_7.forEach((value_8: string, key_2: string): void => {
                    output.writeString(key_2);
                    output.writeString(value_8);
                });
                output.writeMapEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.attributesList != null) {
            output.writeFieldBegin("attributesList", thrift.Thrift.Type.LIST, 8);
            output.writeListBegin(thrift.Thrift.Type.MAP, this.attributesList.length);
            this.attributesList.forEach((value_9: Map<string, string>): void => {
                output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, value_9.size);
                value_9.forEach((value_10: string, key_3: string): void => {
                    output.writeString(key_3);
                    output.writeString(value_10);
                });
                output.writeMapEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.measurementAliasList != null) {
            output.writeFieldBegin("measurementAliasList", thrift.Thrift.Type.LIST, 9);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.measurementAliasList.length);
            this.measurementAliasList.forEach((value_11: string): void => {
                output.writeString(value_11);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSCreateMultiTimeseriesReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_12: Int64 = input.readI64();
                        _args.sessionId = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_14: string = input.readString();
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.paths = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_15: Array<number> = new Array<number>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_16: number = input.readI32();
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.dataTypes = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_17: Array<number> = new Array<number>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_18: number = input.readI32();
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.encodings = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_19: Array<number> = new Array<number>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_20: number = input.readI32();
                            value_19.push(value_20);
                        }
                        input.readListEnd();
                        _args.compressors = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_21: Array<Map<string, string>> = new Array<Map<string, string>>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_22: Map<string, string> = new Map<string, string>();
                            const metadata_6: thrift.TMap = input.readMapBegin();
                            const size_6: number = metadata_6.size;
                            for (let i_6: number = 0; i_6 < size_6; i_6++) {
                                const key_4: string = input.readString();
                                const value_23: string = input.readString();
                                value_22.set(key_4, value_23);
                            }
                            input.readMapEnd();
                            value_21.push(value_22);
                        }
                        input.readListEnd();
                        _args.propsList = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_24: Array<Map<string, string>> = new Array<Map<string, string>>();
                        const metadata_7: thrift.TList = input.readListBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const value_25: Map<string, string> = new Map<string, string>();
                            const metadata_8: thrift.TMap = input.readMapBegin();
                            const size_8: number = metadata_8.size;
                            for (let i_8: number = 0; i_8 < size_8; i_8++) {
                                const key_5: string = input.readString();
                                const value_26: string = input.readString();
                                value_25.set(key_5, value_26);
                            }
                            input.readMapEnd();
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.tagsList = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_27: Array<Map<string, string>> = new Array<Map<string, string>>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_28: Map<string, string> = new Map<string, string>();
                            const metadata_10: thrift.TMap = input.readMapBegin();
                            const size_10: number = metadata_10.size;
                            for (let i_10: number = 0; i_10 < size_10; i_10++) {
                                const key_6: string = input.readString();
                                const value_29: string = input.readString();
                                value_28.set(key_6, value_29);
                            }
                            input.readMapEnd();
                            value_27.push(value_28);
                        }
                        input.readListEnd();
                        _args.attributesList = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_30: Array<string> = new Array<string>();
                        const metadata_11: thrift.TList = input.readListBegin();
                        const size_11: number = metadata_11.size;
                        for (let i_11: number = 0; i_11 < size_11; i_11++) {
                            const value_31: string = input.readString();
                            value_30.push(value_31);
                        }
                        input.readListEnd();
                        _args.measurementAliasList = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.paths !== undefined && _args.dataTypes !== undefined && _args.encodings !== undefined && _args.compressors !== undefined) {
            return new TSCreateMultiTimeseriesReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSCreateMultiTimeseriesReq from input");
        }
    }
}
