/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSInsertTabletsReqArgs {
    sessionId: number | Int64;
    prefixPaths: Array<string>;
    measurementsList: Array<Array<string>>;
    valuesList: Array<Buffer>;
    timestampsList: Array<Buffer>;
    typesList: Array<Array<number>>;
    sizeList: Array<number>;
    isAligned?: boolean;
}
export class TSInsertTabletsReq {
    public sessionId: Int64;
    public prefixPaths: Array<string>;
    public measurementsList: Array<Array<string>>;
    public valuesList: Array<Buffer>;
    public timestampsList: Array<Buffer>;
    public typesList: Array<Array<number>>;
    public sizeList: Array<number>;
    public isAligned?: boolean;
    constructor(args: ITSInsertTabletsReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.prefixPaths != null) {
            this.prefixPaths = args.prefixPaths;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[prefixPaths] is unset!");
        }
        if (args != null && args.measurementsList != null) {
            this.measurementsList = args.measurementsList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[measurementsList] is unset!");
        }
        if (args != null && args.valuesList != null) {
            this.valuesList = args.valuesList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[valuesList] is unset!");
        }
        if (args != null && args.timestampsList != null) {
            this.timestampsList = args.timestampsList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timestampsList] is unset!");
        }
        if (args != null && args.typesList != null) {
            this.typesList = args.typesList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[typesList] is unset!");
        }
        if (args != null && args.sizeList != null) {
            this.sizeList = args.sizeList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sizeList] is unset!");
        }
        if (args != null && args.isAligned != null) {
            this.isAligned = args.isAligned;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSInsertTabletsReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.prefixPaths != null) {
            output.writeFieldBegin("prefixPaths", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.prefixPaths.length);
            this.prefixPaths.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.measurementsList != null) {
            output.writeFieldBegin("measurementsList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.LIST, this.measurementsList.length);
            this.measurementsList.forEach((value_2: Array<string>): void => {
                output.writeListBegin(thrift.Thrift.Type.STRING, value_2.length);
                value_2.forEach((value_3: string): void => {
                    output.writeString(value_3);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.valuesList != null) {
            output.writeFieldBegin("valuesList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.valuesList.length);
            this.valuesList.forEach((value_4: Buffer): void => {
                output.writeBinary(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.timestampsList != null) {
            output.writeFieldBegin("timestampsList", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.timestampsList.length);
            this.timestampsList.forEach((value_5: Buffer): void => {
                output.writeBinary(value_5);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.typesList != null) {
            output.writeFieldBegin("typesList", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.LIST, this.typesList.length);
            this.typesList.forEach((value_6: Array<number>): void => {
                output.writeListBegin(thrift.Thrift.Type.I32, value_6.length);
                value_6.forEach((value_7: number): void => {
                    output.writeI32(value_7);
                });
                output.writeListEnd();
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.sizeList != null) {
            output.writeFieldBegin("sizeList", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.I32, this.sizeList.length);
            this.sizeList.forEach((value_8: number): void => {
                output.writeI32(value_8);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.isAligned != null) {
            output.writeFieldBegin("isAligned", thrift.Thrift.Type.BOOL, 8);
            output.writeBool(this.isAligned);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSInsertTabletsReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.sessionId = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_11: string = input.readString();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.prefixPaths = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<Array<string>> = new Array<Array<string>>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_13: Array<string> = new Array<string>();
                            const metadata_3: thrift.TList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_14: string = input.readString();
                                value_13.push(value_14);
                            }
                            input.readListEnd();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.measurementsList = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_15: Array<Buffer> = new Array<Buffer>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_16: Buffer = input.readBinary();
                            value_15.push(value_16);
                        }
                        input.readListEnd();
                        _args.valuesList = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_17: Array<Buffer> = new Array<Buffer>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_18: Buffer = input.readBinary();
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.timestampsList = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_19: Array<Array<number>> = new Array<Array<number>>();
                        const metadata_6: thrift.TList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_20: Array<number> = new Array<number>();
                            const metadata_7: thrift.TList = input.readListBegin();
                            const size_7: number = metadata_7.size;
                            for (let i_7: number = 0; i_7 < size_7; i_7++) {
                                const value_21: number = input.readI32();
                                value_20.push(value_21);
                            }
                            input.readListEnd();
                            value_19.push(value_20);
                        }
                        input.readListEnd();
                        _args.typesList = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_22: Array<number> = new Array<number>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_23: number = input.readI32();
                            value_22.push(value_23);
                        }
                        input.readListEnd();
                        _args.sizeList = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_24: boolean = input.readBool();
                        _args.isAligned = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.prefixPaths !== undefined && _args.measurementsList !== undefined && _args.valuesList !== undefined && _args.timestampsList !== undefined && _args.typesList !== undefined && _args.sizeList !== undefined) {
            return new TSInsertTabletsReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSInsertTabletsReq from input");
        }
    }
}
