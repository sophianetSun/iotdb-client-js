/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITSFetchMetadataRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    metadataInJson?: string;
    columnsList?: Array<string>;
    dataType?: string;
}
export class TSFetchMetadataResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public metadataInJson?: string;
    public columnsList?: Array<string>;
    public dataType?: string;
    constructor(args: ITSFetchMetadataRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.metadataInJson != null) {
            this.metadataInJson = args.metadataInJson;
        }
        if (args != null && args.columnsList != null) {
            this.columnsList = args.columnsList;
        }
        if (args != null && args.dataType != null) {
            this.dataType = args.dataType;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSFetchMetadataResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.metadataInJson != null) {
            output.writeFieldBegin("metadataInJson", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.metadataInJson);
            output.writeFieldEnd();
        }
        if (this.columnsList != null) {
            output.writeFieldBegin("columnsList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.columnsList.length);
            this.columnsList.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.dataType != null) {
            output.writeFieldBegin("dataType", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.dataType);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSFetchMetadataResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.metadataInJson = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: string = input.readString();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.columnsList = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.dataType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined) {
            return new TSFetchMetadataResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSFetchMetadataResp from input");
        }
    }
}
