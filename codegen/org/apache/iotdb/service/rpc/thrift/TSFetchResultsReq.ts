/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSFetchResultsReqArgs {
    sessionId: number | Int64;
    statement: string;
    fetchSize: number;
    queryId: number | Int64;
    isAlign: boolean;
    timeout?: number | Int64;
    statementId?: number | Int64;
}
export class TSFetchResultsReq {
    public sessionId: Int64;
    public statement: string;
    public fetchSize: number;
    public queryId: Int64;
    public isAlign: boolean;
    public timeout?: Int64;
    public statementId?: Int64;
    constructor(args: ITSFetchResultsReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.statement != null) {
            this.statement = args.statement;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[statement] is unset!");
        }
        if (args != null && args.fetchSize != null) {
            this.fetchSize = args.fetchSize;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fetchSize] is unset!");
        }
        if (args != null && args.queryId != null) {
            if (typeof args.queryId === "number") {
                this.queryId = new Int64(args.queryId);
            }
            else {
                this.queryId = args.queryId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[queryId] is unset!");
        }
        if (args != null && args.isAlign != null) {
            this.isAlign = args.isAlign;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[isAlign] is unset!");
        }
        if (args != null && args.timeout != null) {
            if (typeof args.timeout === "number") {
                this.timeout = new Int64(args.timeout);
            }
            else {
                this.timeout = args.timeout;
            }
        }
        if (args != null && args.statementId != null) {
            if (typeof args.statementId === "number") {
                this.statementId = new Int64(args.statementId);
            }
            else {
                this.statementId = args.statementId;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSFetchResultsReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.statement != null) {
            output.writeFieldBegin("statement", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.statement);
            output.writeFieldEnd();
        }
        if (this.fetchSize != null) {
            output.writeFieldBegin("fetchSize", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.fetchSize);
            output.writeFieldEnd();
        }
        if (this.queryId != null) {
            output.writeFieldBegin("queryId", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.queryId);
            output.writeFieldEnd();
        }
        if (this.isAlign != null) {
            output.writeFieldBegin("isAlign", thrift.Thrift.Type.BOOL, 5);
            output.writeBool(this.isAlign);
            output.writeFieldEnd();
        }
        if (this.timeout != null) {
            output.writeFieldBegin("timeout", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.timeout);
            output.writeFieldEnd();
        }
        if (this.statementId != null) {
            output.writeFieldBegin("statementId", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.statementId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSFetchResultsReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.sessionId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.statement = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: number = input.readI32();
                        _args.fetchSize = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.queryId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_5: boolean = input.readBool();
                        _args.isAlign = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.timeout = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.statementId = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.statement !== undefined && _args.fetchSize !== undefined && _args.queryId !== undefined && _args.isAlign !== undefined) {
            return new TSFetchResultsReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSFetchResultsReq from input");
        }
    }
}
