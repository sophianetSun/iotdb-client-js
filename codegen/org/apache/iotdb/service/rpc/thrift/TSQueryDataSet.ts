/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITSQueryDataSetArgs {
    time: Buffer;
    valueList: Array<Buffer>;
    bitmapList: Array<Buffer>;
}
export class TSQueryDataSet {
    public time: Buffer;
    public valueList: Array<Buffer>;
    public bitmapList: Array<Buffer>;
    constructor(args: ITSQueryDataSetArgs) {
        if (args != null && args.time != null) {
            this.time = args.time;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[time] is unset!");
        }
        if (args != null && args.valueList != null) {
            this.valueList = args.valueList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[valueList] is unset!");
        }
        if (args != null && args.bitmapList != null) {
            this.bitmapList = args.bitmapList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[bitmapList] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSQueryDataSet");
        if (this.time != null) {
            output.writeFieldBegin("time", thrift.Thrift.Type.STRING, 1);
            output.writeBinary(this.time);
            output.writeFieldEnd();
        }
        if (this.valueList != null) {
            output.writeFieldBegin("valueList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.valueList.length);
            this.valueList.forEach((value_1: Buffer): void => {
                output.writeBinary(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.bitmapList != null) {
            output.writeFieldBegin("bitmapList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.bitmapList.length);
            this.bitmapList.forEach((value_2: Buffer): void => {
                output.writeBinary(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSQueryDataSet {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: Buffer = input.readBinary();
                        _args.time = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<Buffer> = new Array<Buffer>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: Buffer = input.readBinary();
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.valueList = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_6: Array<Buffer> = new Array<Buffer>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_7: Buffer = input.readBinary();
                            value_6.push(value_7);
                        }
                        input.readListEnd();
                        _args.bitmapList = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.time !== undefined && _args.valueList !== undefined && _args.bitmapList !== undefined) {
            return new TSQueryDataSet(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSQueryDataSet from input");
        }
    }
}
