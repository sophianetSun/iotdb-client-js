/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITSBackupConfigurationRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    enableOperationSync?: boolean;
    secondaryAddress?: string;
    secondaryPort?: number;
}
export class TSBackupConfigurationResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public enableOperationSync?: boolean;
    public secondaryAddress?: string;
    public secondaryPort?: number;
    constructor(args: ITSBackupConfigurationRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.enableOperationSync != null) {
            this.enableOperationSync = args.enableOperationSync;
        }
        if (args != null && args.secondaryAddress != null) {
            this.secondaryAddress = args.secondaryAddress;
        }
        if (args != null && args.secondaryPort != null) {
            this.secondaryPort = args.secondaryPort;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSBackupConfigurationResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.enableOperationSync != null) {
            output.writeFieldBegin("enableOperationSync", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.enableOperationSync);
            output.writeFieldEnd();
        }
        if (this.secondaryAddress != null) {
            output.writeFieldBegin("secondaryAddress", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.secondaryAddress);
            output.writeFieldEnd();
        }
        if (this.secondaryPort != null) {
            output.writeFieldBegin("secondaryPort", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.secondaryPort);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSBackupConfigurationResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.enableOperationSync = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.secondaryAddress = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_4: number = input.readI32();
                        _args.secondaryPort = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined) {
            return new TSBackupConfigurationResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSBackupConfigurationResp from input");
        }
    }
}
