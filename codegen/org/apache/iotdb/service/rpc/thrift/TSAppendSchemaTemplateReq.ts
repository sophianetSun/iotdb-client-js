/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSAppendSchemaTemplateReqArgs {
    sessionId: number | Int64;
    name: string;
    isAligned: boolean;
    measurements: Array<string>;
    dataTypes: Array<number>;
    encodings: Array<number>;
    compressors: Array<number>;
}
export class TSAppendSchemaTemplateReq {
    public sessionId: Int64;
    public name: string;
    public isAligned: boolean;
    public measurements: Array<string>;
    public dataTypes: Array<number>;
    public encodings: Array<number>;
    public compressors: Array<number>;
    constructor(args: ITSAppendSchemaTemplateReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[name] is unset!");
        }
        if (args != null && args.isAligned != null) {
            this.isAligned = args.isAligned;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[isAligned] is unset!");
        }
        if (args != null && args.measurements != null) {
            this.measurements = args.measurements;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[measurements] is unset!");
        }
        if (args != null && args.dataTypes != null) {
            this.dataTypes = args.dataTypes;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dataTypes] is unset!");
        }
        if (args != null && args.encodings != null) {
            this.encodings = args.encodings;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[encodings] is unset!");
        }
        if (args != null && args.compressors != null) {
            this.compressors = args.compressors;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[compressors] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSAppendSchemaTemplateReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.isAligned != null) {
            output.writeFieldBegin("isAligned", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.isAligned);
            output.writeFieldEnd();
        }
        if (this.measurements != null) {
            output.writeFieldBegin("measurements", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.measurements.length);
            this.measurements.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.dataTypes != null) {
            output.writeFieldBegin("dataTypes", thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.I32, this.dataTypes.length);
            this.dataTypes.forEach((value_2: number): void => {
                output.writeI32(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.encodings != null) {
            output.writeFieldBegin("encodings", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.I32, this.encodings.length);
            this.encodings.forEach((value_3: number): void => {
                output.writeI32(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.compressors != null) {
            output.writeFieldBegin("compressors", thrift.Thrift.Type.LIST, 7);
            output.writeListBegin(thrift.Thrift.Type.I32, this.compressors.length);
            this.compressors.forEach((value_4: number): void => {
                output.writeI32(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSAppendSchemaTemplateReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.sessionId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.name = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_7: boolean = input.readBool();
                        _args.isAligned = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_8: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_9: string = input.readString();
                            value_8.push(value_9);
                        }
                        input.readListEnd();
                        _args.measurements = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_10: Array<number> = new Array<number>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_11: number = input.readI32();
                            value_10.push(value_11);
                        }
                        input.readListEnd();
                        _args.dataTypes = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12: Array<number> = new Array<number>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_13: number = input.readI32();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.encodings = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_14: Array<number> = new Array<number>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_15: number = input.readI32();
                            value_14.push(value_15);
                        }
                        input.readListEnd();
                        _args.compressors = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.name !== undefined && _args.isAligned !== undefined && _args.measurements !== undefined && _args.dataTypes !== undefined && _args.encodings !== undefined && _args.compressors !== undefined) {
            return new TSAppendSchemaTemplateReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSAppendSchemaTemplateReq from input");
        }
    }
}
