/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface IServerPropertiesArgs {
    version: string;
    supportedTimeAggregationOperations: Array<string>;
    timestampPrecision: string;
    maxConcurrentClientNum?: number;
    thriftMaxFrameSize?: number;
    isReadOnly?: boolean;
    buildInfo?: string;
    logo?: string;
}
export class ServerProperties {
    public version: string;
    public supportedTimeAggregationOperations: Array<string>;
    public timestampPrecision: string;
    public maxConcurrentClientNum?: number;
    public thriftMaxFrameSize?: number;
    public isReadOnly?: boolean;
    public buildInfo?: string;
    public logo?: string;
    constructor(args: IServerPropertiesArgs) {
        if (args != null && args.version != null) {
            this.version = args.version;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[version] is unset!");
        }
        if (args != null && args.supportedTimeAggregationOperations != null) {
            this.supportedTimeAggregationOperations = args.supportedTimeAggregationOperations;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[supportedTimeAggregationOperations] is unset!");
        }
        if (args != null && args.timestampPrecision != null) {
            this.timestampPrecision = args.timestampPrecision;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timestampPrecision] is unset!");
        }
        if (args != null && args.maxConcurrentClientNum != null) {
            this.maxConcurrentClientNum = args.maxConcurrentClientNum;
        }
        if (args != null && args.thriftMaxFrameSize != null) {
            this.thriftMaxFrameSize = args.thriftMaxFrameSize;
        }
        if (args != null && args.isReadOnly != null) {
            this.isReadOnly = args.isReadOnly;
        }
        if (args != null && args.buildInfo != null) {
            this.buildInfo = args.buildInfo;
        }
        if (args != null && args.logo != null) {
            this.logo = args.logo;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ServerProperties");
        if (this.version != null) {
            output.writeFieldBegin("version", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.version);
            output.writeFieldEnd();
        }
        if (this.supportedTimeAggregationOperations != null) {
            output.writeFieldBegin("supportedTimeAggregationOperations", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.supportedTimeAggregationOperations.length);
            this.supportedTimeAggregationOperations.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.timestampPrecision != null) {
            output.writeFieldBegin("timestampPrecision", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.timestampPrecision);
            output.writeFieldEnd();
        }
        if (this.maxConcurrentClientNum != null) {
            output.writeFieldBegin("maxConcurrentClientNum", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.maxConcurrentClientNum);
            output.writeFieldEnd();
        }
        if (this.thriftMaxFrameSize != null) {
            output.writeFieldBegin("thriftMaxFrameSize", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.thriftMaxFrameSize);
            output.writeFieldEnd();
        }
        if (this.isReadOnly != null) {
            output.writeFieldBegin("isReadOnly", thrift.Thrift.Type.BOOL, 6);
            output.writeBool(this.isReadOnly);
            output.writeFieldEnd();
        }
        if (this.buildInfo != null) {
            output.writeFieldBegin("buildInfo", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.buildInfo);
            output.writeFieldEnd();
        }
        if (this.logo != null) {
            output.writeFieldBegin("logo", thrift.Thrift.Type.STRING, 8);
            output.writeString(this.logo);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ServerProperties {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.version = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_3: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_4: string = input.readString();
                            value_3.push(value_4);
                        }
                        input.readListEnd();
                        _args.supportedTimeAggregationOperations = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.timestampPrecision = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.maxConcurrentClientNum = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.thriftMaxFrameSize = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_8: boolean = input.readBool();
                        _args.isReadOnly = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_9: string = input.readString();
                        _args.buildInfo = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_10: string = input.readString();
                        _args.logo = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.version !== undefined && _args.supportedTimeAggregationOperations !== undefined && _args.timestampPrecision !== undefined) {
            return new ServerProperties(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read ServerProperties from input");
        }
    }
}
