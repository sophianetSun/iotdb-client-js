/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
import * as TSQueryDataSet from "./TSQueryDataSet";
import * as TSQueryNonAlignDataSet from "./TSQueryNonAlignDataSet";
export interface ITSFetchResultsRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    hasResultSet: boolean;
    isAlign: boolean;
    queryDataSet?: TSQueryDataSet.TSQueryDataSet;
    nonAlignQueryDataSet?: TSQueryNonAlignDataSet.TSQueryNonAlignDataSet;
    queryResult?: Array<Buffer>;
    moreData?: boolean;
}
export class TSFetchResultsResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public hasResultSet: boolean;
    public isAlign: boolean;
    public queryDataSet?: TSQueryDataSet.TSQueryDataSet;
    public nonAlignQueryDataSet?: TSQueryNonAlignDataSet.TSQueryNonAlignDataSet;
    public queryResult?: Array<Buffer>;
    public moreData?: boolean;
    constructor(args: ITSFetchResultsRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.hasResultSet != null) {
            this.hasResultSet = args.hasResultSet;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[hasResultSet] is unset!");
        }
        if (args != null && args.isAlign != null) {
            this.isAlign = args.isAlign;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[isAlign] is unset!");
        }
        if (args != null && args.queryDataSet != null) {
            this.queryDataSet = args.queryDataSet;
        }
        if (args != null && args.nonAlignQueryDataSet != null) {
            this.nonAlignQueryDataSet = args.nonAlignQueryDataSet;
        }
        if (args != null && args.queryResult != null) {
            this.queryResult = args.queryResult;
        }
        if (args != null && args.moreData != null) {
            this.moreData = args.moreData;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSFetchResultsResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.hasResultSet != null) {
            output.writeFieldBegin("hasResultSet", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.hasResultSet);
            output.writeFieldEnd();
        }
        if (this.isAlign != null) {
            output.writeFieldBegin("isAlign", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.isAlign);
            output.writeFieldEnd();
        }
        if (this.queryDataSet != null) {
            output.writeFieldBegin("queryDataSet", thrift.Thrift.Type.STRUCT, 4);
            this.queryDataSet.write(output);
            output.writeFieldEnd();
        }
        if (this.nonAlignQueryDataSet != null) {
            output.writeFieldBegin("nonAlignQueryDataSet", thrift.Thrift.Type.STRUCT, 5);
            this.nonAlignQueryDataSet.write(output);
            output.writeFieldEnd();
        }
        if (this.queryResult != null) {
            output.writeFieldBegin("queryResult", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.queryResult.length);
            this.queryResult.forEach((value_1: Buffer): void => {
                output.writeBinary(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.moreData != null) {
            output.writeFieldBegin("moreData", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.moreData);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSFetchResultsResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.hasResultSet = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_4: boolean = input.readBool();
                        _args.isAlign = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: TSQueryDataSet.TSQueryDataSet = TSQueryDataSet.TSQueryDataSet.read(input);
                        _args.queryDataSet = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: TSQueryNonAlignDataSet.TSQueryNonAlignDataSet = TSQueryNonAlignDataSet.TSQueryNonAlignDataSet.read(input);
                        _args.nonAlignQueryDataSet = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<Buffer> = new Array<Buffer>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: Buffer = input.readBinary();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.queryResult = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.moreData = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.hasResultSet !== undefined && _args.isAlign !== undefined) {
            return new TSFetchResultsResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSFetchResultsResp from input");
        }
    }
}
