/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSCreateTimeseriesReqArgs {
    sessionId: number | Int64;
    path: string;
    dataType: number;
    encoding: number;
    compressor: number;
    props?: Map<string, string>;
    tags?: Map<string, string>;
    attributes?: Map<string, string>;
    measurementAlias?: string;
}
export class TSCreateTimeseriesReq {
    public sessionId: Int64;
    public path: string;
    public dataType: number;
    public encoding: number;
    public compressor: number;
    public props?: Map<string, string>;
    public tags?: Map<string, string>;
    public attributes?: Map<string, string>;
    public measurementAlias?: string;
    constructor(args: ITSCreateTimeseriesReqArgs) {
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sessionId] is unset!");
        }
        if (args != null && args.path != null) {
            this.path = args.path;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[path] is unset!");
        }
        if (args != null && args.dataType != null) {
            this.dataType = args.dataType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[dataType] is unset!");
        }
        if (args != null && args.encoding != null) {
            this.encoding = args.encoding;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[encoding] is unset!");
        }
        if (args != null && args.compressor != null) {
            this.compressor = args.compressor;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[compressor] is unset!");
        }
        if (args != null && args.props != null) {
            this.props = args.props;
        }
        if (args != null && args.tags != null) {
            this.tags = args.tags;
        }
        if (args != null && args.attributes != null) {
            this.attributes = args.attributes;
        }
        if (args != null && args.measurementAlias != null) {
            this.measurementAlias = args.measurementAlias;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSCreateTimeseriesReq");
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.path != null) {
            output.writeFieldBegin("path", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.path);
            output.writeFieldEnd();
        }
        if (this.dataType != null) {
            output.writeFieldBegin("dataType", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.dataType);
            output.writeFieldEnd();
        }
        if (this.encoding != null) {
            output.writeFieldBegin("encoding", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.encoding);
            output.writeFieldEnd();
        }
        if (this.compressor != null) {
            output.writeFieldBegin("compressor", thrift.Thrift.Type.I32, 5);
            output.writeI32(this.compressor);
            output.writeFieldEnd();
        }
        if (this.props != null) {
            output.writeFieldBegin("props", thrift.Thrift.Type.MAP, 6);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.props.size);
            this.props.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.tags != null) {
            output.writeFieldBegin("tags", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.tags.size);
            this.tags.forEach((value_2: string, key_2: string): void => {
                output.writeString(key_2);
                output.writeString(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.attributes != null) {
            output.writeFieldBegin("attributes", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.attributes.size);
            this.attributes.forEach((value_3: string, key_3: string): void => {
                output.writeString(key_3);
                output.writeString(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.measurementAlias != null) {
            output.writeFieldBegin("measurementAlias", thrift.Thrift.Type.STRING, 9);
            output.writeString(this.measurementAlias);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSCreateTimeseriesReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.sessionId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.path = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: number = input.readI32();
                        _args.dataType = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_7: number = input.readI32();
                        _args.encoding = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_8: number = input.readI32();
                        _args.compressor = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_9: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_4: string = input.readString();
                            const value_10: string = input.readString();
                            value_9.set(key_4, value_10);
                        }
                        input.readMapEnd();
                        _args.props = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_11: Map<string, string> = new Map<string, string>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_5: string = input.readString();
                            const value_12: string = input.readString();
                            value_11.set(key_5, value_12);
                        }
                        input.readMapEnd();
                        _args.tags = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_13: Map<string, string> = new Map<string, string>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_6: string = input.readString();
                            const value_14: string = input.readString();
                            value_13.set(key_6, value_14);
                        }
                        input.readMapEnd();
                        _args.attributes = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_15: string = input.readString();
                        _args.measurementAlias = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.sessionId !== undefined && _args.path !== undefined && _args.dataType !== undefined && _args.encoding !== undefined && _args.compressor !== undefined) {
            return new TSCreateTimeseriesReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSCreateTimeseriesReq from input");
        }
    }
}
