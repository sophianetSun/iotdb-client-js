/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITSyncIdentityInfoArgs {
    pipeName: string;
    createTime: number | Int64;
    version: string;
    database: string;
}
export class TSyncIdentityInfo {
    public pipeName: string;
    public createTime: Int64;
    public version: string;
    public database: string;
    constructor(args: ITSyncIdentityInfoArgs) {
        if (args != null && args.pipeName != null) {
            this.pipeName = args.pipeName;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[pipeName] is unset!");
        }
        if (args != null && args.createTime != null) {
            if (typeof args.createTime === "number") {
                this.createTime = new Int64(args.createTime);
            }
            else {
                this.createTime = args.createTime;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[createTime] is unset!");
        }
        if (args != null && args.version != null) {
            this.version = args.version;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[version] is unset!");
        }
        if (args != null && args.database != null) {
            this.database = args.database;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[database] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSyncIdentityInfo");
        if (this.pipeName != null) {
            output.writeFieldBegin("pipeName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.pipeName);
            output.writeFieldEnd();
        }
        if (this.createTime != null) {
            output.writeFieldBegin("createTime", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.createTime);
            output.writeFieldEnd();
        }
        if (this.version != null) {
            output.writeFieldBegin("version", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.version);
            output.writeFieldEnd();
        }
        if (this.database != null) {
            output.writeFieldBegin("database", thrift.Thrift.Type.STRING, 4);
            output.writeString(this.database);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSyncIdentityInfo {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.pipeName = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.createTime = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.version = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.database = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.pipeName !== undefined && _args.createTime !== undefined && _args.version !== undefined && _args.database !== undefined) {
            return new TSyncIdentityInfo(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSyncIdentityInfo from input");
        }
    }
}
