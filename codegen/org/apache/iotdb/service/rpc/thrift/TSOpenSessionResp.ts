/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
import * as TSProtocolVersion from "./TSProtocolVersion";
export interface ITSOpenSessionRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    serverProtocolVersion: TSProtocolVersion.TSProtocolVersion;
    sessionId?: number | Int64;
    configuration?: Map<string, string>;
}
export class TSOpenSessionResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public serverProtocolVersion: TSProtocolVersion.TSProtocolVersion = TSProtocolVersion.TSProtocolVersion.IOTDB_SERVICE_PROTOCOL_V1;
    public sessionId?: Int64;
    public configuration?: Map<string, string>;
    constructor(args: ITSOpenSessionRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.serverProtocolVersion != null) {
            this.serverProtocolVersion = args.serverProtocolVersion;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[serverProtocolVersion] is unset!");
        }
        if (args != null && args.sessionId != null) {
            if (typeof args.sessionId === "number") {
                this.sessionId = new Int64(args.sessionId);
            }
            else {
                this.sessionId = args.sessionId;
            }
        }
        if (args != null && args.configuration != null) {
            this.configuration = args.configuration;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TSOpenSessionResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.serverProtocolVersion != null) {
            output.writeFieldBegin("serverProtocolVersion", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.serverProtocolVersion);
            output.writeFieldEnd();
        }
        if (this.sessionId != null) {
            output.writeFieldBegin("sessionId", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.sessionId);
            output.writeFieldEnd();
        }
        if (this.configuration != null) {
            output.writeFieldBegin("configuration", thrift.Thrift.Type.MAP, 4);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.configuration.size);
            this.configuration.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TSOpenSessionResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: TSProtocolVersion.TSProtocolVersion = input.readI32();
                        _args.serverProtocolVersion = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.sessionId = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_5: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_6: string = input.readString();
                            value_5.set(key_2, value_6);
                        }
                        input.readMapEnd();
                        _args.configuration = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined && _args.serverProtocolVersion !== undefined) {
            return new TSOpenSessionResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TSOpenSessionResp from input");
        }
    }
}
