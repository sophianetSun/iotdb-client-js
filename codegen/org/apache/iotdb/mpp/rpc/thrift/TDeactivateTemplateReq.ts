/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITDeactivateTemplateReqArgs {
    schemaRegionIdList: Array<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId>;
    templateSetInfo: Map<string, Array<number>>;
    isGeneratedByPipe?: boolean;
}
export class TDeactivateTemplateReq {
    public schemaRegionIdList: Array<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId>;
    public templateSetInfo: Map<string, Array<number>>;
    public isGeneratedByPipe?: boolean;
    constructor(args: ITDeactivateTemplateReqArgs) {
        if (args != null && args.schemaRegionIdList != null) {
            this.schemaRegionIdList = args.schemaRegionIdList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[schemaRegionIdList] is unset!");
        }
        if (args != null && args.templateSetInfo != null) {
            this.templateSetInfo = args.templateSetInfo;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[templateSetInfo] is unset!");
        }
        if (args != null && args.isGeneratedByPipe != null) {
            this.isGeneratedByPipe = args.isGeneratedByPipe;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TDeactivateTemplateReq");
        if (this.schemaRegionIdList != null) {
            output.writeFieldBegin("schemaRegionIdList", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRUCT, this.schemaRegionIdList.length);
            this.schemaRegionIdList.forEach((value_1: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId): void => {
                value_1.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.templateSetInfo != null) {
            output.writeFieldBegin("templateSetInfo", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.LIST, this.templateSetInfo.size);
            this.templateSetInfo.forEach((value_2: Array<number>, key_1: string): void => {
                output.writeString(key_1);
                output.writeListBegin(thrift.Thrift.Type.I32, value_2.length);
                value_2.forEach((value_3: number): void => {
                    output.writeI32(value_3);
                });
                output.writeListEnd();
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.isGeneratedByPipe != null) {
            output.writeFieldBegin("isGeneratedByPipe", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.isGeneratedByPipe);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TDeactivateTemplateReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_4: Array<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId> = new Array<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_5: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId = org_apache_iotdb_common_rpc_thrift.TConsensusGroupId.read(input);
                            value_4.push(value_5);
                        }
                        input.readListEnd();
                        _args.schemaRegionIdList = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_6: Map<string, Array<number>> = new Map<string, Array<number>>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_2: string = input.readString();
                            const value_7: Array<number> = new Array<number>();
                            const metadata_3: thrift.TList = input.readListBegin();
                            const size_3: number = metadata_3.size;
                            for (let i_3: number = 0; i_3 < size_3; i_3++) {
                                const value_8: number = input.readI32();
                                value_7.push(value_8);
                            }
                            input.readListEnd();
                            value_6.set(key_2, value_7);
                        }
                        input.readMapEnd();
                        _args.templateSetInfo = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_9: boolean = input.readBool();
                        _args.isGeneratedByPipe = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.schemaRegionIdList !== undefined && _args.templateSetInfo !== undefined) {
            return new TDeactivateTemplateReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TDeactivateTemplateReq from input");
        }
    }
}
