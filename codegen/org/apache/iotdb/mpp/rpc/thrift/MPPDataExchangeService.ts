/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as TGetDataBlockRequest from "./TGetDataBlockRequest";
import * as TGetDataBlockResponse from "./TGetDataBlockResponse";
import * as TAcknowledgeDataBlockEvent from "./TAcknowledgeDataBlockEvent";
import * as TCloseSinkChannelEvent from "./TCloseSinkChannelEvent";
import * as TNewDataBlockEvent from "./TNewDataBlockEvent";
import * as TEndOfDataBlockEvent from "./TEndOfDataBlockEvent";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface IGetDataBlockArgsArgs {
    req: TGetDataBlockRequest.TGetDataBlockRequest;
}
export class GetDataBlockArgs {
    public req: TGetDataBlockRequest.TGetDataBlockRequest;
    constructor(args: IGetDataBlockArgsArgs) {
        if (args != null && args.req != null) {
            this.req = args.req;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[req] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDataBlockArgs");
        if (this.req != null) {
            output.writeFieldBegin("req", thrift.Thrift.Type.STRUCT, -1);
            this.req.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDataBlockArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: TGetDataBlockRequest.TGetDataBlockRequest = TGetDataBlockRequest.TGetDataBlockRequest.read(input);
                        _args.req = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.req !== undefined) {
            return new GetDataBlockArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read GetDataBlockArgs from input");
        }
    }
}
export interface IOnAcknowledgeDataBlockEventArgsArgs {
    e: TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent;
}
export class OnAcknowledgeDataBlockEventArgs {
    public e: TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent;
    constructor(args: IOnAcknowledgeDataBlockEventArgsArgs) {
        if (args != null && args.e != null) {
            this.e = args.e;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[e] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnAcknowledgeDataBlockEventArgs");
        if (this.e != null) {
            output.writeFieldBegin("e", thrift.Thrift.Type.STRUCT, -1);
            this.e.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnAcknowledgeDataBlockEventArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent = TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent.read(input);
                        _args.e = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.e !== undefined) {
            return new OnAcknowledgeDataBlockEventArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read OnAcknowledgeDataBlockEventArgs from input");
        }
    }
}
export interface IOnCloseSinkChannelEventArgsArgs {
    e: TCloseSinkChannelEvent.TCloseSinkChannelEvent;
}
export class OnCloseSinkChannelEventArgs {
    public e: TCloseSinkChannelEvent.TCloseSinkChannelEvent;
    constructor(args: IOnCloseSinkChannelEventArgsArgs) {
        if (args != null && args.e != null) {
            this.e = args.e;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[e] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnCloseSinkChannelEventArgs");
        if (this.e != null) {
            output.writeFieldBegin("e", thrift.Thrift.Type.STRUCT, -1);
            this.e.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnCloseSinkChannelEventArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: TCloseSinkChannelEvent.TCloseSinkChannelEvent = TCloseSinkChannelEvent.TCloseSinkChannelEvent.read(input);
                        _args.e = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.e !== undefined) {
            return new OnCloseSinkChannelEventArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read OnCloseSinkChannelEventArgs from input");
        }
    }
}
export interface IOnNewDataBlockEventArgsArgs {
    e: TNewDataBlockEvent.TNewDataBlockEvent;
}
export class OnNewDataBlockEventArgs {
    public e: TNewDataBlockEvent.TNewDataBlockEvent;
    constructor(args: IOnNewDataBlockEventArgsArgs) {
        if (args != null && args.e != null) {
            this.e = args.e;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[e] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnNewDataBlockEventArgs");
        if (this.e != null) {
            output.writeFieldBegin("e", thrift.Thrift.Type.STRUCT, -1);
            this.e.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnNewDataBlockEventArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_4: TNewDataBlockEvent.TNewDataBlockEvent = TNewDataBlockEvent.TNewDataBlockEvent.read(input);
                        _args.e = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.e !== undefined) {
            return new OnNewDataBlockEventArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read OnNewDataBlockEventArgs from input");
        }
    }
}
export interface IOnEndOfDataBlockEventArgsArgs {
    e: TEndOfDataBlockEvent.TEndOfDataBlockEvent;
}
export class OnEndOfDataBlockEventArgs {
    public e: TEndOfDataBlockEvent.TEndOfDataBlockEvent;
    constructor(args: IOnEndOfDataBlockEventArgsArgs) {
        if (args != null && args.e != null) {
            this.e = args.e;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[e] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnEndOfDataBlockEventArgs");
        if (this.e != null) {
            output.writeFieldBegin("e", thrift.Thrift.Type.STRUCT, -1);
            this.e.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnEndOfDataBlockEventArgs {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case -1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: TEndOfDataBlockEvent.TEndOfDataBlockEvent = TEndOfDataBlockEvent.TEndOfDataBlockEvent.read(input);
                        _args.e = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.e !== undefined) {
            return new OnEndOfDataBlockEventArgs(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read OnEndOfDataBlockEventArgs from input");
        }
    }
}
export interface ITestConnectionEmptyRPCArgsArgs {
}
export class TestConnectionEmptyRPCArgs {
    constructor() {
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TestConnectionEmptyRPCArgs");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TestConnectionEmptyRPCArgs {
        input.readStructBegin();
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new TestConnectionEmptyRPCArgs();
    }
}
export interface IGetDataBlockResultArgs {
    success?: TGetDataBlockResponse.TGetDataBlockResponse;
}
export class GetDataBlockResult {
    public success?: TGetDataBlockResponse.TGetDataBlockResponse;
    constructor(args?: IGetDataBlockResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("GetDataBlockResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): GetDataBlockResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_6: TGetDataBlockResponse.TGetDataBlockResponse = TGetDataBlockResponse.TGetDataBlockResponse.read(input);
                        _args.success = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new GetDataBlockResult(_args);
    }
}
export interface IOnAcknowledgeDataBlockEventResultArgs {
    success?: void;
}
export class OnAcknowledgeDataBlockEventResult {
    public success?: void;
    constructor(args?: IOnAcknowledgeDataBlockEventResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnAcknowledgeDataBlockEventResult");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnAcknowledgeDataBlockEventResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.VOID) {
                        input.skip(fieldType);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new OnAcknowledgeDataBlockEventResult(_args);
    }
}
export interface IOnCloseSinkChannelEventResultArgs {
    success?: void;
}
export class OnCloseSinkChannelEventResult {
    public success?: void;
    constructor(args?: IOnCloseSinkChannelEventResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnCloseSinkChannelEventResult");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnCloseSinkChannelEventResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.VOID) {
                        input.skip(fieldType);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new OnCloseSinkChannelEventResult(_args);
    }
}
export interface IOnNewDataBlockEventResultArgs {
    success?: void;
}
export class OnNewDataBlockEventResult {
    public success?: void;
    constructor(args?: IOnNewDataBlockEventResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnNewDataBlockEventResult");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnNewDataBlockEventResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.VOID) {
                        input.skip(fieldType);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new OnNewDataBlockEventResult(_args);
    }
}
export interface IOnEndOfDataBlockEventResultArgs {
    success?: void;
}
export class OnEndOfDataBlockEventResult {
    public success?: void;
    constructor(args?: IOnEndOfDataBlockEventResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("OnEndOfDataBlockEventResult");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): OnEndOfDataBlockEventResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.VOID) {
                        input.skip(fieldType);
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new OnEndOfDataBlockEventResult(_args);
    }
}
export interface ITestConnectionEmptyRPCResultArgs {
    success?: org_apache_iotdb_common_rpc_thrift.TSStatus;
}
export class TestConnectionEmptyRPCResult {
    public success?: org_apache_iotdb_common_rpc_thrift.TSStatus;
    constructor(args?: ITestConnectionEmptyRPCResultArgs) {
        if (args != null && args.success != null) {
            this.success = args.success;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TestConnectionEmptyRPCResult");
        if (this.success != null) {
            output.writeFieldBegin("success", thrift.Thrift.Type.STRUCT, 0);
            this.success.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TestConnectionEmptyRPCResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 0:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.success = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new TestConnectionEmptyRPCResult(_args);
    }
}
export class Client {
    public _seqid: number;
    public _reqs: {
        [name: number]: (err: Error | object | undefined, val?: any) => void;
    };
    public output: thrift.TTransport;
    public protocol: new (trans: thrift.TTransport) => thrift.TProtocol;
    constructor(output: thrift.TTransport, protocol: new (trans: thrift.TTransport) => thrift.TProtocol) {
        this._seqid = 0;
        this._reqs = {};
        this.output = output;
        this.protocol = protocol;
    }
    public incrementSeqId(): number {
        return this._seqid += 1;
    }
    public getDataBlock(req: TGetDataBlockRequest.TGetDataBlockRequest): Promise<TGetDataBlockResponse.TGetDataBlockResponse> {
        const requestId: number = this.incrementSeqId();
        return new Promise<TGetDataBlockResponse.TGetDataBlockResponse>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_getDataBlock(req, requestId);
        });
    }
    public onAcknowledgeDataBlockEvent(e: TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent): Promise<void> {
        const requestId: number = this.incrementSeqId();
        return new Promise<void>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_onAcknowledgeDataBlockEvent(e, requestId);
        });
    }
    public onCloseSinkChannelEvent(e: TCloseSinkChannelEvent.TCloseSinkChannelEvent): Promise<void> {
        const requestId: number = this.incrementSeqId();
        return new Promise<void>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_onCloseSinkChannelEvent(e, requestId);
        });
    }
    public onNewDataBlockEvent(e: TNewDataBlockEvent.TNewDataBlockEvent): Promise<void> {
        const requestId: number = this.incrementSeqId();
        return new Promise<void>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_onNewDataBlockEvent(e, requestId);
        });
    }
    public onEndOfDataBlockEvent(e: TEndOfDataBlockEvent.TEndOfDataBlockEvent): Promise<void> {
        const requestId: number = this.incrementSeqId();
        return new Promise<void>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_onEndOfDataBlockEvent(e, requestId);
        });
    }
    public testConnectionEmptyRPC(): Promise<org_apache_iotdb_common_rpc_thrift.TSStatus> {
        const requestId: number = this.incrementSeqId();
        return new Promise<org_apache_iotdb_common_rpc_thrift.TSStatus>((resolve, reject): void => {
            this._reqs[requestId] = (error, result) => {
                delete this._reqs[requestId];
                if (error != null) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            this.send_testConnectionEmptyRPC(requestId);
        });
    }
    public send_getDataBlock(req: TGetDataBlockRequest.TGetDataBlockRequest, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("getDataBlock", thrift.Thrift.MessageType.CALL, requestId);
        const args: GetDataBlockArgs = new GetDataBlockArgs({ req });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_onAcknowledgeDataBlockEvent(e: TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("onAcknowledgeDataBlockEvent", thrift.Thrift.MessageType.CALL, requestId);
        const args: OnAcknowledgeDataBlockEventArgs = new OnAcknowledgeDataBlockEventArgs({ e });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_onCloseSinkChannelEvent(e: TCloseSinkChannelEvent.TCloseSinkChannelEvent, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("onCloseSinkChannelEvent", thrift.Thrift.MessageType.CALL, requestId);
        const args: OnCloseSinkChannelEventArgs = new OnCloseSinkChannelEventArgs({ e });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_onNewDataBlockEvent(e: TNewDataBlockEvent.TNewDataBlockEvent, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("onNewDataBlockEvent", thrift.Thrift.MessageType.CALL, requestId);
        const args: OnNewDataBlockEventArgs = new OnNewDataBlockEventArgs({ e });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_onEndOfDataBlockEvent(e: TEndOfDataBlockEvent.TEndOfDataBlockEvent, requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("onEndOfDataBlockEvent", thrift.Thrift.MessageType.CALL, requestId);
        const args: OnEndOfDataBlockEventArgs = new OnEndOfDataBlockEventArgs({ e });
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public send_testConnectionEmptyRPC(requestId: number): void {
        const output: thrift.TProtocol = new this.protocol(this.output);
        output.writeMessageBegin("testConnectionEmptyRPC", thrift.Thrift.MessageType.CALL, requestId);
        const args: TestConnectionEmptyRPCArgs = new TestConnectionEmptyRPCArgs();
        args.write(output);
        output.writeMessageEnd();
        this.output.flush();
        return;
    }
    public recv_getDataBlock(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: GetDataBlockResult = GetDataBlockResult.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "getDataBlock failed: unknown result"));
            }
        }
    }
    public recv_onAcknowledgeDataBlockEvent(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            input.readMessageEnd();
            return callback(undefined);
        }
    }
    public recv_onCloseSinkChannelEvent(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            input.readMessageEnd();
            return callback(undefined);
        }
    }
    public recv_onNewDataBlockEvent(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            input.readMessageEnd();
            return callback(undefined);
        }
    }
    public recv_onEndOfDataBlockEvent(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            input.readMessageEnd();
            return callback(undefined);
        }
    }
    public recv_testConnectionEmptyRPC(input: thrift.TProtocol, mtype: thrift.Thrift.MessageType, requestId: number): void {
        const noop = (): any => null;
        const callback = this._reqs[requestId] || noop;
        if (mtype === thrift.Thrift.MessageType.EXCEPTION) {
            const x: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException();
            x.read(input);
            input.readMessageEnd();
            return callback(x);
        }
        else {
            const result: TestConnectionEmptyRPCResult = TestConnectionEmptyRPCResult.read(input);
            input.readMessageEnd();
            if (result.success != null) {
                return callback(undefined, result.success);
            }
            else {
                return callback(new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, "testConnectionEmptyRPC failed: unknown result"));
            }
        }
    }
}
export interface IHandler {
    getDataBlock(req: TGetDataBlockRequest.TGetDataBlockRequest): TGetDataBlockResponse.TGetDataBlockResponse | Promise<TGetDataBlockResponse.TGetDataBlockResponse>;
    onAcknowledgeDataBlockEvent(e: TAcknowledgeDataBlockEvent.TAcknowledgeDataBlockEvent): void | Promise<void>;
    onCloseSinkChannelEvent(e: TCloseSinkChannelEvent.TCloseSinkChannelEvent): void | Promise<void>;
    onNewDataBlockEvent(e: TNewDataBlockEvent.TNewDataBlockEvent): void | Promise<void>;
    onEndOfDataBlockEvent(e: TEndOfDataBlockEvent.TEndOfDataBlockEvent): void | Promise<void>;
    testConnectionEmptyRPC(): org_apache_iotdb_common_rpc_thrift.TSStatus | Promise<org_apache_iotdb_common_rpc_thrift.TSStatus>;
}
export class Processor {
    public _handler: IHandler;
    constructor(handler: IHandler) {
        this._handler = handler;
    }
    public process(input: thrift.TProtocol, output: thrift.TProtocol): void {
        const metadata: thrift.TMessage = input.readMessageBegin();
        const fname: string = metadata.fname;
        const requestId: number = metadata.rseqid;
        const methodName: string = "process_" + fname;
        switch (methodName) {
            case "process_getDataBlock": {
                this.process_getDataBlock(requestId, input, output);
                return;
            }
            case "process_onAcknowledgeDataBlockEvent": {
                this.process_onAcknowledgeDataBlockEvent(requestId, input, output);
                return;
            }
            case "process_onCloseSinkChannelEvent": {
                this.process_onCloseSinkChannelEvent(requestId, input, output);
                return;
            }
            case "process_onNewDataBlockEvent": {
                this.process_onNewDataBlockEvent(requestId, input, output);
                return;
            }
            case "process_onEndOfDataBlockEvent": {
                this.process_onEndOfDataBlockEvent(requestId, input, output);
                return;
            }
            case "process_testConnectionEmptyRPC": {
                this.process_testConnectionEmptyRPC(requestId, input, output);
                return;
            }
            default: {
                input.skip(thrift.Thrift.Type.STRUCT);
                input.readMessageEnd();
                const errMessage = "Unknown function " + fname;
                const err = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN_METHOD, errMessage);
                output.writeMessageBegin(fname, thrift.Thrift.MessageType.EXCEPTION, requestId);
                err.write(output);
                output.writeMessageEnd();
                output.flush();
                return;
            }
        }
    }
    public process_getDataBlock(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<TGetDataBlockResponse.TGetDataBlockResponse>((resolve, reject): void => {
            try {
                const args: GetDataBlockArgs = GetDataBlockArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.getDataBlock(args.req));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: TGetDataBlockResponse.TGetDataBlockResponse): void => {
            const result: GetDataBlockResult = new GetDataBlockResult({ success: data });
            output.writeMessageBegin("getDataBlock", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("getDataBlock", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_onAcknowledgeDataBlockEvent(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<void>((resolve, reject): void => {
            try {
                const args: OnAcknowledgeDataBlockEventArgs = OnAcknowledgeDataBlockEventArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.onAcknowledgeDataBlockEvent(args.e));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: void): void => {
            const result: OnAcknowledgeDataBlockEventResult = new OnAcknowledgeDataBlockEventResult({ success: data });
            output.writeMessageBegin("onAcknowledgeDataBlockEvent", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("onAcknowledgeDataBlockEvent", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_onCloseSinkChannelEvent(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<void>((resolve, reject): void => {
            try {
                const args: OnCloseSinkChannelEventArgs = OnCloseSinkChannelEventArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.onCloseSinkChannelEvent(args.e));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: void): void => {
            const result: OnCloseSinkChannelEventResult = new OnCloseSinkChannelEventResult({ success: data });
            output.writeMessageBegin("onCloseSinkChannelEvent", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("onCloseSinkChannelEvent", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_onNewDataBlockEvent(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<void>((resolve, reject): void => {
            try {
                const args: OnNewDataBlockEventArgs = OnNewDataBlockEventArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.onNewDataBlockEvent(args.e));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: void): void => {
            const result: OnNewDataBlockEventResult = new OnNewDataBlockEventResult({ success: data });
            output.writeMessageBegin("onNewDataBlockEvent", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("onNewDataBlockEvent", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_onEndOfDataBlockEvent(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<void>((resolve, reject): void => {
            try {
                const args: OnEndOfDataBlockEventArgs = OnEndOfDataBlockEventArgs.read(input);
                input.readMessageEnd();
                resolve(this._handler.onEndOfDataBlockEvent(args.e));
            }
            catch (err) {
                reject(err);
            }
        }).then((data: void): void => {
            const result: OnEndOfDataBlockEventResult = new OnEndOfDataBlockEventResult({ success: data });
            output.writeMessageBegin("onEndOfDataBlockEvent", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("onEndOfDataBlockEvent", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
    public process_testConnectionEmptyRPC(requestId: number, input: thrift.TProtocol, output: thrift.TProtocol): void {
        new Promise<org_apache_iotdb_common_rpc_thrift.TSStatus>((resolve, reject): void => {
            try {
                input.readMessageEnd();
                resolve(this._handler.testConnectionEmptyRPC());
            }
            catch (err) {
                reject(err);
            }
        }).then((data: org_apache_iotdb_common_rpc_thrift.TSStatus): void => {
            const result: TestConnectionEmptyRPCResult = new TestConnectionEmptyRPCResult({ success: data });
            output.writeMessageBegin("testConnectionEmptyRPC", thrift.Thrift.MessageType.REPLY, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        }).catch((err: Error): void => {
            const result: thrift.Thrift.TApplicationException = new thrift.Thrift.TApplicationException(thrift.Thrift.TApplicationExceptionType.UNKNOWN, err.message);
            output.writeMessageBegin("testConnectionEmptyRPC", thrift.Thrift.MessageType.EXCEPTION, requestId);
            result.write(output);
            output.writeMessageEnd();
            output.flush();
            return;
        });
    }
}
