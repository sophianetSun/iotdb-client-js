/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITFetchTimeseriesRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    queryId?: number | Int64;
    columnNameList?: Array<string>;
    columnTypeList?: Array<string>;
    columnNameIndexMap?: Map<string, number>;
    tsDataset?: Array<Buffer>;
    hasMoreData?: boolean;
}
export class TFetchTimeseriesResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public queryId?: Int64;
    public columnNameList?: Array<string>;
    public columnTypeList?: Array<string>;
    public columnNameIndexMap?: Map<string, number>;
    public tsDataset?: Array<Buffer>;
    public hasMoreData?: boolean;
    constructor(args: ITFetchTimeseriesRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.queryId != null) {
            if (typeof args.queryId === "number") {
                this.queryId = new Int64(args.queryId);
            }
            else {
                this.queryId = args.queryId;
            }
        }
        if (args != null && args.columnNameList != null) {
            this.columnNameList = args.columnNameList;
        }
        if (args != null && args.columnTypeList != null) {
            this.columnTypeList = args.columnTypeList;
        }
        if (args != null && args.columnNameIndexMap != null) {
            this.columnNameIndexMap = args.columnNameIndexMap;
        }
        if (args != null && args.tsDataset != null) {
            this.tsDataset = args.tsDataset;
        }
        if (args != null && args.hasMoreData != null) {
            this.hasMoreData = args.hasMoreData;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TFetchTimeseriesResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.queryId != null) {
            output.writeFieldBegin("queryId", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.queryId);
            output.writeFieldEnd();
        }
        if (this.columnNameList != null) {
            output.writeFieldBegin("columnNameList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.columnNameList.length);
            this.columnNameList.forEach((value_1: string): void => {
                output.writeString(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.columnTypeList != null) {
            output.writeFieldBegin("columnTypeList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.columnTypeList.length);
            this.columnTypeList.forEach((value_2: string): void => {
                output.writeString(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.columnNameIndexMap != null) {
            output.writeFieldBegin("columnNameIndexMap", thrift.Thrift.Type.MAP, 5);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.I32, this.columnNameIndexMap.size);
            this.columnNameIndexMap.forEach((value_3: number, key_1: string): void => {
                output.writeString(key_1);
                output.writeI32(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.tsDataset != null) {
            output.writeFieldBegin("tsDataset", thrift.Thrift.Type.LIST, 6);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.tsDataset.length);
            this.tsDataset.forEach((value_4: Buffer): void => {
                output.writeBinary(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.hasMoreData != null) {
            output.writeFieldBegin("hasMoreData", thrift.Thrift.Type.BOOL, 7);
            output.writeBool(this.hasMoreData);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TFetchTimeseriesResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_5: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.queryId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<string> = new Array<string>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_8: string = input.readString();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.columnNameList = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<string> = new Array<string>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_10: string = input.readString();
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.columnTypeList = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_11: Map<string, number> = new Map<string, number>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_2: string = input.readString();
                            const value_12: number = input.readI32();
                            value_11.set(key_2, value_12);
                        }
                        input.readMapEnd();
                        _args.columnNameIndexMap = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_13: Array<Buffer> = new Array<Buffer>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_14: Buffer = input.readBinary();
                            value_13.push(value_14);
                        }
                        input.readListEnd();
                        _args.tsDataset = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_15: boolean = input.readBool();
                        _args.hasMoreData = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined) {
            return new TFetchTimeseriesResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TFetchTimeseriesResp from input");
        }
    }
}
