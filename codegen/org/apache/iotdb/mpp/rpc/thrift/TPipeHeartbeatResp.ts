/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITPipeHeartbeatRespArgs {
    pipeMetaList: Array<Buffer>;
    pipeCompletedList?: Array<boolean>;
    pipeRemainingEventCountList?: Array<number | Int64>;
    pipeRemainingTimeList?: Array<number>;
}
export class TPipeHeartbeatResp {
    public pipeMetaList: Array<Buffer>;
    public pipeCompletedList?: Array<boolean>;
    public pipeRemainingEventCountList?: Array<Int64>;
    public pipeRemainingTimeList?: Array<number>;
    constructor(args: ITPipeHeartbeatRespArgs) {
        if (args != null && args.pipeMetaList != null) {
            this.pipeMetaList = args.pipeMetaList;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[pipeMetaList] is unset!");
        }
        if (args != null && args.pipeCompletedList != null) {
            this.pipeCompletedList = args.pipeCompletedList;
        }
        if (args != null && args.pipeRemainingEventCountList != null) {
            this.pipeRemainingEventCountList = args.pipeRemainingEventCountList;
        }
        if (args != null && args.pipeRemainingTimeList != null) {
            this.pipeRemainingTimeList = args.pipeRemainingTimeList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TPipeHeartbeatResp");
        if (this.pipeMetaList != null) {
            output.writeFieldBegin("pipeMetaList", thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.pipeMetaList.length);
            this.pipeMetaList.forEach((value_1: Buffer): void => {
                output.writeBinary(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pipeCompletedList != null) {
            output.writeFieldBegin("pipeCompletedList", thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.BOOL, this.pipeCompletedList.length);
            this.pipeCompletedList.forEach((value_2: boolean): void => {
                output.writeBool(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pipeRemainingEventCountList != null) {
            output.writeFieldBegin("pipeRemainingEventCountList", thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.I64, this.pipeRemainingEventCountList.length);
            this.pipeRemainingEventCountList.forEach((value_3: Int64): void => {
                output.writeI64(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pipeRemainingTimeList != null) {
            output.writeFieldBegin("pipeRemainingTimeList", thrift.Thrift.Type.LIST, 4);
            output.writeListBegin(thrift.Thrift.Type.DOUBLE, this.pipeRemainingTimeList.length);
            this.pipeRemainingTimeList.forEach((value_4: number): void => {
                output.writeDouble(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TPipeHeartbeatResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5: Array<Buffer> = new Array<Buffer>();
                        const metadata_1: thrift.TList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_6: Buffer = input.readBinary();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.pipeMetaList = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7: Array<boolean> = new Array<boolean>();
                        const metadata_2: thrift.TList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_8: boolean = input.readBool();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.pipeCompletedList = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9: Array<Int64> = new Array<Int64>();
                        const metadata_3: thrift.TList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_10: Int64 = input.readI64();
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.pipeRemainingEventCountList = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_11: Array<number> = new Array<number>();
                        const metadata_4: thrift.TList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_12: number = input.readDouble();
                            value_11.push(value_12);
                        }
                        input.readListEnd();
                        _args.pipeRemainingTimeList = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.pipeMetaList !== undefined) {
            return new TPipeHeartbeatResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TPipeHeartbeatResp from input");
        }
    }
}
