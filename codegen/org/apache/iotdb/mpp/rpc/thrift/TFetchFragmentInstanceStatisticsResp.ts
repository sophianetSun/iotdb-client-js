/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
import * as TFragmentInstanceId from "./TFragmentInstanceId";
import * as TQueryStatistics from "./TQueryStatistics";
import * as TOperatorStatistics from "./TOperatorStatistics";
export interface ITFetchFragmentInstanceStatisticsRespArgs {
    status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    fragmentInstanceId?: TFragmentInstanceId.TFragmentInstanceId;
    dataRegion?: string;
    startTimeInMS?: number | Int64;
    endTimeInMS?: number | Int64;
    queryStatistics?: TQueryStatistics.TQueryStatistics;
    operatorStatisticsMap?: Map<string, TOperatorStatistics.TOperatorStatistics>;
    initDataQuerySourceCost?: number | Int64;
    seqUnclosedNum?: number | Int64;
    seqClosednNum?: number | Int64;
    unseqClosedNum?: number | Int64;
    unseqUnclosedNum?: number | Int64;
    readyQueuedTime?: number | Int64;
    blockQueuedTime?: number | Int64;
    ip?: string;
    state?: string;
}
export class TFetchFragmentInstanceStatisticsResp {
    public status: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public fragmentInstanceId?: TFragmentInstanceId.TFragmentInstanceId;
    public dataRegion?: string;
    public startTimeInMS?: Int64;
    public endTimeInMS?: Int64;
    public queryStatistics?: TQueryStatistics.TQueryStatistics;
    public operatorStatisticsMap?: Map<string, TOperatorStatistics.TOperatorStatistics>;
    public initDataQuerySourceCost?: Int64;
    public seqUnclosedNum?: Int64;
    public seqClosednNum?: Int64;
    public unseqClosedNum?: Int64;
    public unseqUnclosedNum?: Int64;
    public readyQueuedTime?: Int64;
    public blockQueuedTime?: Int64;
    public ip?: string;
    public state?: string;
    constructor(args: ITFetchFragmentInstanceStatisticsRespArgs) {
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.fragmentInstanceId != null) {
            this.fragmentInstanceId = args.fragmentInstanceId;
        }
        if (args != null && args.dataRegion != null) {
            this.dataRegion = args.dataRegion;
        }
        if (args != null && args.startTimeInMS != null) {
            if (typeof args.startTimeInMS === "number") {
                this.startTimeInMS = new Int64(args.startTimeInMS);
            }
            else {
                this.startTimeInMS = args.startTimeInMS;
            }
        }
        if (args != null && args.endTimeInMS != null) {
            if (typeof args.endTimeInMS === "number") {
                this.endTimeInMS = new Int64(args.endTimeInMS);
            }
            else {
                this.endTimeInMS = args.endTimeInMS;
            }
        }
        if (args != null && args.queryStatistics != null) {
            this.queryStatistics = args.queryStatistics;
        }
        if (args != null && args.operatorStatisticsMap != null) {
            this.operatorStatisticsMap = args.operatorStatisticsMap;
        }
        if (args != null && args.initDataQuerySourceCost != null) {
            if (typeof args.initDataQuerySourceCost === "number") {
                this.initDataQuerySourceCost = new Int64(args.initDataQuerySourceCost);
            }
            else {
                this.initDataQuerySourceCost = args.initDataQuerySourceCost;
            }
        }
        if (args != null && args.seqUnclosedNum != null) {
            if (typeof args.seqUnclosedNum === "number") {
                this.seqUnclosedNum = new Int64(args.seqUnclosedNum);
            }
            else {
                this.seqUnclosedNum = args.seqUnclosedNum;
            }
        }
        if (args != null && args.seqClosednNum != null) {
            if (typeof args.seqClosednNum === "number") {
                this.seqClosednNum = new Int64(args.seqClosednNum);
            }
            else {
                this.seqClosednNum = args.seqClosednNum;
            }
        }
        if (args != null && args.unseqClosedNum != null) {
            if (typeof args.unseqClosedNum === "number") {
                this.unseqClosedNum = new Int64(args.unseqClosedNum);
            }
            else {
                this.unseqClosedNum = args.unseqClosedNum;
            }
        }
        if (args != null && args.unseqUnclosedNum != null) {
            if (typeof args.unseqUnclosedNum === "number") {
                this.unseqUnclosedNum = new Int64(args.unseqUnclosedNum);
            }
            else {
                this.unseqUnclosedNum = args.unseqUnclosedNum;
            }
        }
        if (args != null && args.readyQueuedTime != null) {
            if (typeof args.readyQueuedTime === "number") {
                this.readyQueuedTime = new Int64(args.readyQueuedTime);
            }
            else {
                this.readyQueuedTime = args.readyQueuedTime;
            }
        }
        if (args != null && args.blockQueuedTime != null) {
            if (typeof args.blockQueuedTime === "number") {
                this.blockQueuedTime = new Int64(args.blockQueuedTime);
            }
            else {
                this.blockQueuedTime = args.blockQueuedTime;
            }
        }
        if (args != null && args.ip != null) {
            this.ip = args.ip;
        }
        if (args != null && args.state != null) {
            this.state = args.state;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TFetchFragmentInstanceStatisticsResp");
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRUCT, 1);
            this.status.write(output);
            output.writeFieldEnd();
        }
        if (this.fragmentInstanceId != null) {
            output.writeFieldBegin("fragmentInstanceId", thrift.Thrift.Type.STRUCT, 2);
            this.fragmentInstanceId.write(output);
            output.writeFieldEnd();
        }
        if (this.dataRegion != null) {
            output.writeFieldBegin("dataRegion", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.dataRegion);
            output.writeFieldEnd();
        }
        if (this.startTimeInMS != null) {
            output.writeFieldBegin("startTimeInMS", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.startTimeInMS);
            output.writeFieldEnd();
        }
        if (this.endTimeInMS != null) {
            output.writeFieldBegin("endTimeInMS", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.endTimeInMS);
            output.writeFieldEnd();
        }
        if (this.queryStatistics != null) {
            output.writeFieldBegin("queryStatistics", thrift.Thrift.Type.STRUCT, 6);
            this.queryStatistics.write(output);
            output.writeFieldEnd();
        }
        if (this.operatorStatisticsMap != null) {
            output.writeFieldBegin("operatorStatisticsMap", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRUCT, this.operatorStatisticsMap.size);
            this.operatorStatisticsMap.forEach((value_1: TOperatorStatistics.TOperatorStatistics, key_1: string): void => {
                output.writeString(key_1);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.initDataQuerySourceCost != null) {
            output.writeFieldBegin("initDataQuerySourceCost", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.initDataQuerySourceCost);
            output.writeFieldEnd();
        }
        if (this.seqUnclosedNum != null) {
            output.writeFieldBegin("seqUnclosedNum", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.seqUnclosedNum);
            output.writeFieldEnd();
        }
        if (this.seqClosednNum != null) {
            output.writeFieldBegin("seqClosednNum", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.seqClosednNum);
            output.writeFieldEnd();
        }
        if (this.unseqClosedNum != null) {
            output.writeFieldBegin("unseqClosedNum", thrift.Thrift.Type.I64, 11);
            output.writeI64(this.unseqClosedNum);
            output.writeFieldEnd();
        }
        if (this.unseqUnclosedNum != null) {
            output.writeFieldBegin("unseqUnclosedNum", thrift.Thrift.Type.I64, 12);
            output.writeI64(this.unseqUnclosedNum);
            output.writeFieldEnd();
        }
        if (this.readyQueuedTime != null) {
            output.writeFieldBegin("readyQueuedTime", thrift.Thrift.Type.I64, 13);
            output.writeI64(this.readyQueuedTime);
            output.writeFieldEnd();
        }
        if (this.blockQueuedTime != null) {
            output.writeFieldBegin("blockQueuedTime", thrift.Thrift.Type.I64, 14);
            output.writeI64(this.blockQueuedTime);
            output.writeFieldEnd();
        }
        if (this.ip != null) {
            output.writeFieldBegin("ip", thrift.Thrift.Type.STRING, 15);
            output.writeString(this.ip);
            output.writeFieldEnd();
        }
        if (this.state != null) {
            output.writeFieldBegin("state", thrift.Thrift.Type.STRING, 16);
            output.writeString(this.state);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TFetchFragmentInstanceStatisticsResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.status = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: TFragmentInstanceId.TFragmentInstanceId = TFragmentInstanceId.TFragmentInstanceId.read(input);
                        _args.fragmentInstanceId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: string = input.readString();
                        _args.dataRegion = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.startTimeInMS = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.endTimeInMS = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_7: TQueryStatistics.TQueryStatistics = TQueryStatistics.TQueryStatistics.read(input);
                        _args.queryStatistics = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_8: Map<string, TOperatorStatistics.TOperatorStatistics> = new Map<string, TOperatorStatistics.TOperatorStatistics>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_9: TOperatorStatistics.TOperatorStatistics = TOperatorStatistics.TOperatorStatistics.read(input);
                            value_8.set(key_2, value_9);
                        }
                        input.readMapEnd();
                        _args.operatorStatisticsMap = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.initDataQuerySourceCost = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.seqUnclosedNum = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_12: Int64 = input.readI64();
                        _args.seqClosednNum = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_13: Int64 = input.readI64();
                        _args.unseqClosedNum = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.unseqUnclosedNum = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.readyQueuedTime = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_16: Int64 = input.readI64();
                        _args.blockQueuedTime = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_17: string = input.readString();
                        _args.ip = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_18: string = input.readString();
                        _args.state = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.status !== undefined) {
            return new TFetchFragmentInstanceStatisticsResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TFetchFragmentInstanceStatisticsResp from input");
        }
    }
}
