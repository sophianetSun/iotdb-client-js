/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITLoadCommandReqArgs {
    commandType: number;
    uuid: string;
    isGeneratedByPipe?: boolean;
    progressIndex?: Buffer;
}
export class TLoadCommandReq {
    public commandType: number;
    public uuid: string;
    public isGeneratedByPipe?: boolean;
    public progressIndex?: Buffer;
    constructor(args: ITLoadCommandReqArgs) {
        if (args != null && args.commandType != null) {
            this.commandType = args.commandType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[commandType] is unset!");
        }
        if (args != null && args.uuid != null) {
            this.uuid = args.uuid;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[uuid] is unset!");
        }
        if (args != null && args.isGeneratedByPipe != null) {
            this.isGeneratedByPipe = args.isGeneratedByPipe;
        }
        if (args != null && args.progressIndex != null) {
            this.progressIndex = args.progressIndex;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TLoadCommandReq");
        if (this.commandType != null) {
            output.writeFieldBegin("commandType", thrift.Thrift.Type.I32, 1);
            output.writeI32(this.commandType);
            output.writeFieldEnd();
        }
        if (this.uuid != null) {
            output.writeFieldBegin("uuid", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.uuid);
            output.writeFieldEnd();
        }
        if (this.isGeneratedByPipe != null) {
            output.writeFieldBegin("isGeneratedByPipe", thrift.Thrift.Type.BOOL, 3);
            output.writeBool(this.isGeneratedByPipe);
            output.writeFieldEnd();
        }
        if (this.progressIndex != null) {
            output.writeFieldBegin("progressIndex", thrift.Thrift.Type.STRING, 4);
            output.writeBinary(this.progressIndex);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TLoadCommandReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_1: number = input.readI32();
                        _args.commandType = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.uuid = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_3: boolean = input.readBool();
                        _args.isGeneratedByPipe = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_4: Buffer = input.readBinary();
                        _args.progressIndex = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.commandType !== undefined && _args.uuid !== undefined) {
            return new TLoadCommandReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TLoadCommandReq from input");
        }
    }
}
