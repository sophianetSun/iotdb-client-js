/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITOperatorStatisticsArgs {
    planNodeId: string;
    operatorType: string;
    totalExecutionTimeInNanos: number | Int64;
    nextCalledCount: number | Int64;
    hasNextCalledCount: number | Int64;
    specifiedInfo: Map<string, string>;
    outputRows: number | Int64;
    memoryUsage: number | Int64;
    count?: number | Int64;
}
export class TOperatorStatistics {
    public planNodeId: string;
    public operatorType: string;
    public totalExecutionTimeInNanos: Int64;
    public nextCalledCount: Int64;
    public hasNextCalledCount: Int64;
    public specifiedInfo: Map<string, string>;
    public outputRows: Int64;
    public memoryUsage: Int64;
    public count?: Int64;
    constructor(args: ITOperatorStatisticsArgs) {
        if (args != null && args.planNodeId != null) {
            this.planNodeId = args.planNodeId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[planNodeId] is unset!");
        }
        if (args != null && args.operatorType != null) {
            this.operatorType = args.operatorType;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[operatorType] is unset!");
        }
        if (args != null && args.totalExecutionTimeInNanos != null) {
            if (typeof args.totalExecutionTimeInNanos === "number") {
                this.totalExecutionTimeInNanos = new Int64(args.totalExecutionTimeInNanos);
            }
            else {
                this.totalExecutionTimeInNanos = args.totalExecutionTimeInNanos;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[totalExecutionTimeInNanos] is unset!");
        }
        if (args != null && args.nextCalledCount != null) {
            if (typeof args.nextCalledCount === "number") {
                this.nextCalledCount = new Int64(args.nextCalledCount);
            }
            else {
                this.nextCalledCount = args.nextCalledCount;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[nextCalledCount] is unset!");
        }
        if (args != null && args.hasNextCalledCount != null) {
            if (typeof args.hasNextCalledCount === "number") {
                this.hasNextCalledCount = new Int64(args.hasNextCalledCount);
            }
            else {
                this.hasNextCalledCount = args.hasNextCalledCount;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[hasNextCalledCount] is unset!");
        }
        if (args != null && args.specifiedInfo != null) {
            this.specifiedInfo = args.specifiedInfo;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[specifiedInfo] is unset!");
        }
        if (args != null && args.outputRows != null) {
            if (typeof args.outputRows === "number") {
                this.outputRows = new Int64(args.outputRows);
            }
            else {
                this.outputRows = args.outputRows;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[outputRows] is unset!");
        }
        if (args != null && args.memoryUsage != null) {
            if (typeof args.memoryUsage === "number") {
                this.memoryUsage = new Int64(args.memoryUsage);
            }
            else {
                this.memoryUsage = args.memoryUsage;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[memoryUsage] is unset!");
        }
        if (args != null && args.count != null) {
            if (typeof args.count === "number") {
                this.count = new Int64(args.count);
            }
            else {
                this.count = args.count;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TOperatorStatistics");
        if (this.planNodeId != null) {
            output.writeFieldBegin("planNodeId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.planNodeId);
            output.writeFieldEnd();
        }
        if (this.operatorType != null) {
            output.writeFieldBegin("operatorType", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.operatorType);
            output.writeFieldEnd();
        }
        if (this.totalExecutionTimeInNanos != null) {
            output.writeFieldBegin("totalExecutionTimeInNanos", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.totalExecutionTimeInNanos);
            output.writeFieldEnd();
        }
        if (this.nextCalledCount != null) {
            output.writeFieldBegin("nextCalledCount", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.nextCalledCount);
            output.writeFieldEnd();
        }
        if (this.hasNextCalledCount != null) {
            output.writeFieldBegin("hasNextCalledCount", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.hasNextCalledCount);
            output.writeFieldEnd();
        }
        if (this.specifiedInfo != null) {
            output.writeFieldBegin("specifiedInfo", thrift.Thrift.Type.MAP, 6);
            output.writeMapBegin(thrift.Thrift.Type.STRING, thrift.Thrift.Type.STRING, this.specifiedInfo.size);
            this.specifiedInfo.forEach((value_1: string, key_1: string): void => {
                output.writeString(key_1);
                output.writeString(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.outputRows != null) {
            output.writeFieldBegin("outputRows", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.outputRows);
            output.writeFieldEnd();
        }
        if (this.memoryUsage != null) {
            output.writeFieldBegin("memoryUsage", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.memoryUsage);
            output.writeFieldEnd();
        }
        if (this.count != null) {
            output.writeFieldBegin("count", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.count);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TOperatorStatistics {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.planNodeId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.operatorType = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.totalExecutionTimeInNanos = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.nextCalledCount = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.hasNextCalledCount = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_7: Map<string, string> = new Map<string, string>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: string = input.readString();
                            const value_8: string = input.readString();
                            value_7.set(key_2, value_8);
                        }
                        input.readMapEnd();
                        _args.specifiedInfo = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.outputRows = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.memoryUsage = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.count = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.planNodeId !== undefined && _args.operatorType !== undefined && _args.totalExecutionTimeInNanos !== undefined && _args.nextCalledCount !== undefined && _args.hasNextCalledCount !== undefined && _args.specifiedInfo !== undefined && _args.outputRows !== undefined && _args.memoryUsage !== undefined) {
            return new TOperatorStatistics(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TOperatorStatistics from input");
        }
    }
}
