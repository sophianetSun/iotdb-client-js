/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITMaintainPeerReqArgs {
    regionId: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId;
    destNode: org_apache_iotdb_common_rpc_thrift.TDataNodeLocation;
    taskId: number | Int64;
}
export class TMaintainPeerReq {
    public regionId: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId;
    public destNode: org_apache_iotdb_common_rpc_thrift.TDataNodeLocation;
    public taskId: Int64;
    constructor(args: ITMaintainPeerReqArgs) {
        if (args != null && args.regionId != null) {
            this.regionId = args.regionId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[regionId] is unset!");
        }
        if (args != null && args.destNode != null) {
            this.destNode = args.destNode;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[destNode] is unset!");
        }
        if (args != null && args.taskId != null) {
            if (typeof args.taskId === "number") {
                this.taskId = new Int64(args.taskId);
            }
            else {
                this.taskId = args.taskId;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[taskId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TMaintainPeerReq");
        if (this.regionId != null) {
            output.writeFieldBegin("regionId", thrift.Thrift.Type.STRUCT, 1);
            this.regionId.write(output);
            output.writeFieldEnd();
        }
        if (this.destNode != null) {
            output.writeFieldBegin("destNode", thrift.Thrift.Type.STRUCT, 2);
            this.destNode.write(output);
            output.writeFieldEnd();
        }
        if (this.taskId != null) {
            output.writeFieldBegin("taskId", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.taskId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TMaintainPeerReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_1: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId = org_apache_iotdb_common_rpc_thrift.TConsensusGroupId.read(input);
                        _args.regionId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TDataNodeLocation = org_apache_iotdb_common_rpc_thrift.TDataNodeLocation.read(input);
                        _args.destNode = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.taskId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.regionId !== undefined && _args.destNode !== undefined && _args.taskId !== undefined) {
            return new TMaintainPeerReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TMaintainPeerReq from input");
        }
    }
}
