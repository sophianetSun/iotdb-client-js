/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITRegionRouteReqArgs {
    timestamp: number | Int64;
    regionRouteMap: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet>;
}
export class TRegionRouteReq {
    public timestamp: Int64;
    public regionRouteMap: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet>;
    constructor(args: ITRegionRouteReqArgs) {
        if (args != null && args.timestamp != null) {
            if (typeof args.timestamp === "number") {
                this.timestamp = new Int64(args.timestamp);
            }
            else {
                this.timestamp = args.timestamp;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timestamp] is unset!");
        }
        if (args != null && args.regionRouteMap != null) {
            this.regionRouteMap = args.regionRouteMap;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[regionRouteMap] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TRegionRouteReq");
        if (this.timestamp != null) {
            output.writeFieldBegin("timestamp", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.timestamp);
            output.writeFieldEnd();
        }
        if (this.regionRouteMap != null) {
            output.writeFieldBegin("regionRouteMap", thrift.Thrift.Type.MAP, 2);
            output.writeMapBegin(thrift.Thrift.Type.STRUCT, thrift.Thrift.Type.STRUCT, this.regionRouteMap.size);
            this.regionRouteMap.forEach((value_1: org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet, key_1: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId): void => {
                key_1.write(output);
                value_1.write(output);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TRegionRouteReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.timestamp = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_3: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet> = new Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId = org_apache_iotdb_common_rpc_thrift.TConsensusGroupId.read(input);
                            const value_4: org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet = org_apache_iotdb_common_rpc_thrift.TRegionReplicaSet.read(input);
                            value_3.set(key_2, value_4);
                        }
                        input.readMapEnd();
                        _args.regionRouteMap = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.timestamp !== undefined && _args.regionRouteMap !== undefined) {
            return new TRegionRouteReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TRegionRouteReq from input");
        }
    }
}
