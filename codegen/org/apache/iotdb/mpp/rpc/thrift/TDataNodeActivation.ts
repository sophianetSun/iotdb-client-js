/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITDataNodeActivationArgs {
    activated: boolean;
    deviceNumRemain: number | Int64;
    sensorNumRemain: number | Int64;
}
export class TDataNodeActivation {
    public activated: boolean;
    public deviceNumRemain: Int64;
    public sensorNumRemain: Int64;
    constructor(args: ITDataNodeActivationArgs) {
        if (args != null && args.activated != null) {
            this.activated = args.activated;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[activated] is unset!");
        }
        if (args != null && args.deviceNumRemain != null) {
            if (typeof args.deviceNumRemain === "number") {
                this.deviceNumRemain = new Int64(args.deviceNumRemain);
            }
            else {
                this.deviceNumRemain = args.deviceNumRemain;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[deviceNumRemain] is unset!");
        }
        if (args != null && args.sensorNumRemain != null) {
            if (typeof args.sensorNumRemain === "number") {
                this.sensorNumRemain = new Int64(args.sensorNumRemain);
            }
            else {
                this.sensorNumRemain = args.sensorNumRemain;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[sensorNumRemain] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TDataNodeActivation");
        if (this.activated != null) {
            output.writeFieldBegin("activated", thrift.Thrift.Type.BOOL, 1);
            output.writeBool(this.activated);
            output.writeFieldEnd();
        }
        if (this.deviceNumRemain != null) {
            output.writeFieldBegin("deviceNumRemain", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.deviceNumRemain);
            output.writeFieldEnd();
        }
        if (this.sensorNumRemain != null) {
            output.writeFieldBegin("sensorNumRemain", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.sensorNumRemain);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TDataNodeActivation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_1: boolean = input.readBool();
                        _args.activated = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.deviceNumRemain = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.sensorNumRemain = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.activated !== undefined && _args.deviceNumRemain !== undefined && _args.sensorNumRemain !== undefined) {
            return new TDataNodeActivation(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TDataNodeActivation from input");
        }
    }
}
