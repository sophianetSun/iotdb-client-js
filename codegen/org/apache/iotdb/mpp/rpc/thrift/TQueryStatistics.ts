/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITQueryStatisticsArgs {
    loadTimeSeriesMetadataDiskSeqCount?: number | Int64;
    loadTimeSeriesMetadataDiskUnSeqCount?: number | Int64;
    loadTimeSeriesMetadataMemSeqCount?: number | Int64;
    loadTimeSeriesMetadataMemUnSeqCount?: number | Int64;
    loadTimeSeriesMetadataAlignedDiskSeqCount?: number | Int64;
    loadTimeSeriesMetadataAlignedDiskUnSeqCount?: number | Int64;
    loadTimeSeriesMetadataAlignedMemSeqCount?: number | Int64;
    loadTimeSeriesMetadataAlignedMemUnSeqCount?: number | Int64;
    loadTimeSeriesMetadataDiskSeqTime?: number | Int64;
    loadTimeSeriesMetadataDiskUnSeqTime?: number | Int64;
    loadTimeSeriesMetadataMemSeqTime?: number | Int64;
    loadTimeSeriesMetadataMemUnSeqTime?: number | Int64;
    loadTimeSeriesMetadataAlignedDiskSeqTime?: number | Int64;
    loadTimeSeriesMetadataAlignedDiskUnSeqTime?: number | Int64;
    loadTimeSeriesMetadataAlignedMemSeqTime?: number | Int64;
    loadTimeSeriesMetadataAlignedMemUnSeqTime?: number | Int64;
    constructNonAlignedChunkReadersDiskCount?: number | Int64;
    constructNonAlignedChunkReadersMemCount?: number | Int64;
    constructAlignedChunkReadersDiskCount?: number | Int64;
    constructAlignedChunkReadersMemCount?: number | Int64;
    constructNonAlignedChunkReadersDiskTime?: number | Int64;
    constructNonAlignedChunkReadersMemTime?: number | Int64;
    constructAlignedChunkReadersDiskTime?: number | Int64;
    constructAlignedChunkReadersMemTime?: number | Int64;
    pageReadersDecodeAlignedDiskCount?: number | Int64;
    pageReadersDecodeAlignedDiskTime?: number | Int64;
    pageReadersDecodeAlignedMemCount?: number | Int64;
    pageReadersDecodeAlignedMemTime?: number | Int64;
    pageReadersDecodeNonAlignedDiskCount?: number | Int64;
    pageReadersDecodeNonAlignedDiskTime?: number | Int64;
    pageReadersDecodeNonAlignedMemCount?: number | Int64;
    pageReadersDecodeNonAlignedMemTime?: number | Int64;
    pageReaderMaxUsedMemorySize?: number | Int64;
    alignedTimeSeriesMetadataModificationCount?: number | Int64;
    alignedTimeSeriesMetadataModificationTime?: number | Int64;
    nonAlignedTimeSeriesMetadataModificationCount?: number | Int64;
    nonAlignedTimeSeriesMetadataModificationTime?: number | Int64;
    loadBloomFilterFromCacheCount?: number | Int64;
    loadBloomFilterFromDiskCount?: number | Int64;
    loadBloomFilterActualIOSize?: number | Int64;
    loadBloomFilterTime?: number | Int64;
    loadTimeSeriesMetadataFromCacheCount?: number | Int64;
    loadTimeSeriesMetadataFromDiskCount?: number | Int64;
    loadTimeSeriesMetadataActualIOSize?: number | Int64;
    loadChunkFromCacheCount?: number | Int64;
    loadChunkFromDiskCount?: number | Int64;
    loadChunkActualIOSize?: number | Int64;
}
export class TQueryStatistics {
    public loadTimeSeriesMetadataDiskSeqCount?: Int64;
    public loadTimeSeriesMetadataDiskUnSeqCount?: Int64;
    public loadTimeSeriesMetadataMemSeqCount?: Int64;
    public loadTimeSeriesMetadataMemUnSeqCount?: Int64;
    public loadTimeSeriesMetadataAlignedDiskSeqCount?: Int64;
    public loadTimeSeriesMetadataAlignedDiskUnSeqCount?: Int64;
    public loadTimeSeriesMetadataAlignedMemSeqCount?: Int64;
    public loadTimeSeriesMetadataAlignedMemUnSeqCount?: Int64;
    public loadTimeSeriesMetadataDiskSeqTime?: Int64;
    public loadTimeSeriesMetadataDiskUnSeqTime?: Int64;
    public loadTimeSeriesMetadataMemSeqTime?: Int64;
    public loadTimeSeriesMetadataMemUnSeqTime?: Int64;
    public loadTimeSeriesMetadataAlignedDiskSeqTime?: Int64;
    public loadTimeSeriesMetadataAlignedDiskUnSeqTime?: Int64;
    public loadTimeSeriesMetadataAlignedMemSeqTime?: Int64;
    public loadTimeSeriesMetadataAlignedMemUnSeqTime?: Int64;
    public constructNonAlignedChunkReadersDiskCount?: Int64;
    public constructNonAlignedChunkReadersMemCount?: Int64;
    public constructAlignedChunkReadersDiskCount?: Int64;
    public constructAlignedChunkReadersMemCount?: Int64;
    public constructNonAlignedChunkReadersDiskTime?: Int64;
    public constructNonAlignedChunkReadersMemTime?: Int64;
    public constructAlignedChunkReadersDiskTime?: Int64;
    public constructAlignedChunkReadersMemTime?: Int64;
    public pageReadersDecodeAlignedDiskCount?: Int64;
    public pageReadersDecodeAlignedDiskTime?: Int64;
    public pageReadersDecodeAlignedMemCount?: Int64;
    public pageReadersDecodeAlignedMemTime?: Int64;
    public pageReadersDecodeNonAlignedDiskCount?: Int64;
    public pageReadersDecodeNonAlignedDiskTime?: Int64;
    public pageReadersDecodeNonAlignedMemCount?: Int64;
    public pageReadersDecodeNonAlignedMemTime?: Int64;
    public pageReaderMaxUsedMemorySize?: Int64;
    public alignedTimeSeriesMetadataModificationCount?: Int64;
    public alignedTimeSeriesMetadataModificationTime?: Int64;
    public nonAlignedTimeSeriesMetadataModificationCount?: Int64;
    public nonAlignedTimeSeriesMetadataModificationTime?: Int64;
    public loadBloomFilterFromCacheCount?: Int64;
    public loadBloomFilterFromDiskCount?: Int64;
    public loadBloomFilterActualIOSize?: Int64;
    public loadBloomFilterTime?: Int64;
    public loadTimeSeriesMetadataFromCacheCount?: Int64;
    public loadTimeSeriesMetadataFromDiskCount?: Int64;
    public loadTimeSeriesMetadataActualIOSize?: Int64;
    public loadChunkFromCacheCount?: Int64;
    public loadChunkFromDiskCount?: Int64;
    public loadChunkActualIOSize?: Int64;
    constructor(args?: ITQueryStatisticsArgs) {
        if (args != null && args.loadTimeSeriesMetadataDiskSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataDiskSeqCount === "number") {
                this.loadTimeSeriesMetadataDiskSeqCount = new Int64(args.loadTimeSeriesMetadataDiskSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataDiskSeqCount = args.loadTimeSeriesMetadataDiskSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataDiskUnSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataDiskUnSeqCount === "number") {
                this.loadTimeSeriesMetadataDiskUnSeqCount = new Int64(args.loadTimeSeriesMetadataDiskUnSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataDiskUnSeqCount = args.loadTimeSeriesMetadataDiskUnSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataMemSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataMemSeqCount === "number") {
                this.loadTimeSeriesMetadataMemSeqCount = new Int64(args.loadTimeSeriesMetadataMemSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataMemSeqCount = args.loadTimeSeriesMetadataMemSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataMemUnSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataMemUnSeqCount === "number") {
                this.loadTimeSeriesMetadataMemUnSeqCount = new Int64(args.loadTimeSeriesMetadataMemUnSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataMemUnSeqCount = args.loadTimeSeriesMetadataMemUnSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedDiskSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedDiskSeqCount === "number") {
                this.loadTimeSeriesMetadataAlignedDiskSeqCount = new Int64(args.loadTimeSeriesMetadataAlignedDiskSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataAlignedDiskSeqCount = args.loadTimeSeriesMetadataAlignedDiskSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedDiskUnSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedDiskUnSeqCount === "number") {
                this.loadTimeSeriesMetadataAlignedDiskUnSeqCount = new Int64(args.loadTimeSeriesMetadataAlignedDiskUnSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataAlignedDiskUnSeqCount = args.loadTimeSeriesMetadataAlignedDiskUnSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedMemSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedMemSeqCount === "number") {
                this.loadTimeSeriesMetadataAlignedMemSeqCount = new Int64(args.loadTimeSeriesMetadataAlignedMemSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataAlignedMemSeqCount = args.loadTimeSeriesMetadataAlignedMemSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedMemUnSeqCount != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedMemUnSeqCount === "number") {
                this.loadTimeSeriesMetadataAlignedMemUnSeqCount = new Int64(args.loadTimeSeriesMetadataAlignedMemUnSeqCount);
            }
            else {
                this.loadTimeSeriesMetadataAlignedMemUnSeqCount = args.loadTimeSeriesMetadataAlignedMemUnSeqCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataDiskSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataDiskSeqTime === "number") {
                this.loadTimeSeriesMetadataDiskSeqTime = new Int64(args.loadTimeSeriesMetadataDiskSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataDiskSeqTime = args.loadTimeSeriesMetadataDiskSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataDiskUnSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataDiskUnSeqTime === "number") {
                this.loadTimeSeriesMetadataDiskUnSeqTime = new Int64(args.loadTimeSeriesMetadataDiskUnSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataDiskUnSeqTime = args.loadTimeSeriesMetadataDiskUnSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataMemSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataMemSeqTime === "number") {
                this.loadTimeSeriesMetadataMemSeqTime = new Int64(args.loadTimeSeriesMetadataMemSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataMemSeqTime = args.loadTimeSeriesMetadataMemSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataMemUnSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataMemUnSeqTime === "number") {
                this.loadTimeSeriesMetadataMemUnSeqTime = new Int64(args.loadTimeSeriesMetadataMemUnSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataMemUnSeqTime = args.loadTimeSeriesMetadataMemUnSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedDiskSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedDiskSeqTime === "number") {
                this.loadTimeSeriesMetadataAlignedDiskSeqTime = new Int64(args.loadTimeSeriesMetadataAlignedDiskSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataAlignedDiskSeqTime = args.loadTimeSeriesMetadataAlignedDiskSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedDiskUnSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedDiskUnSeqTime === "number") {
                this.loadTimeSeriesMetadataAlignedDiskUnSeqTime = new Int64(args.loadTimeSeriesMetadataAlignedDiskUnSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataAlignedDiskUnSeqTime = args.loadTimeSeriesMetadataAlignedDiskUnSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedMemSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedMemSeqTime === "number") {
                this.loadTimeSeriesMetadataAlignedMemSeqTime = new Int64(args.loadTimeSeriesMetadataAlignedMemSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataAlignedMemSeqTime = args.loadTimeSeriesMetadataAlignedMemSeqTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataAlignedMemUnSeqTime != null) {
            if (typeof args.loadTimeSeriesMetadataAlignedMemUnSeqTime === "number") {
                this.loadTimeSeriesMetadataAlignedMemUnSeqTime = new Int64(args.loadTimeSeriesMetadataAlignedMemUnSeqTime);
            }
            else {
                this.loadTimeSeriesMetadataAlignedMemUnSeqTime = args.loadTimeSeriesMetadataAlignedMemUnSeqTime;
            }
        }
        if (args != null && args.constructNonAlignedChunkReadersDiskCount != null) {
            if (typeof args.constructNonAlignedChunkReadersDiskCount === "number") {
                this.constructNonAlignedChunkReadersDiskCount = new Int64(args.constructNonAlignedChunkReadersDiskCount);
            }
            else {
                this.constructNonAlignedChunkReadersDiskCount = args.constructNonAlignedChunkReadersDiskCount;
            }
        }
        if (args != null && args.constructNonAlignedChunkReadersMemCount != null) {
            if (typeof args.constructNonAlignedChunkReadersMemCount === "number") {
                this.constructNonAlignedChunkReadersMemCount = new Int64(args.constructNonAlignedChunkReadersMemCount);
            }
            else {
                this.constructNonAlignedChunkReadersMemCount = args.constructNonAlignedChunkReadersMemCount;
            }
        }
        if (args != null && args.constructAlignedChunkReadersDiskCount != null) {
            if (typeof args.constructAlignedChunkReadersDiskCount === "number") {
                this.constructAlignedChunkReadersDiskCount = new Int64(args.constructAlignedChunkReadersDiskCount);
            }
            else {
                this.constructAlignedChunkReadersDiskCount = args.constructAlignedChunkReadersDiskCount;
            }
        }
        if (args != null && args.constructAlignedChunkReadersMemCount != null) {
            if (typeof args.constructAlignedChunkReadersMemCount === "number") {
                this.constructAlignedChunkReadersMemCount = new Int64(args.constructAlignedChunkReadersMemCount);
            }
            else {
                this.constructAlignedChunkReadersMemCount = args.constructAlignedChunkReadersMemCount;
            }
        }
        if (args != null && args.constructNonAlignedChunkReadersDiskTime != null) {
            if (typeof args.constructNonAlignedChunkReadersDiskTime === "number") {
                this.constructNonAlignedChunkReadersDiskTime = new Int64(args.constructNonAlignedChunkReadersDiskTime);
            }
            else {
                this.constructNonAlignedChunkReadersDiskTime = args.constructNonAlignedChunkReadersDiskTime;
            }
        }
        if (args != null && args.constructNonAlignedChunkReadersMemTime != null) {
            if (typeof args.constructNonAlignedChunkReadersMemTime === "number") {
                this.constructNonAlignedChunkReadersMemTime = new Int64(args.constructNonAlignedChunkReadersMemTime);
            }
            else {
                this.constructNonAlignedChunkReadersMemTime = args.constructNonAlignedChunkReadersMemTime;
            }
        }
        if (args != null && args.constructAlignedChunkReadersDiskTime != null) {
            if (typeof args.constructAlignedChunkReadersDiskTime === "number") {
                this.constructAlignedChunkReadersDiskTime = new Int64(args.constructAlignedChunkReadersDiskTime);
            }
            else {
                this.constructAlignedChunkReadersDiskTime = args.constructAlignedChunkReadersDiskTime;
            }
        }
        if (args != null && args.constructAlignedChunkReadersMemTime != null) {
            if (typeof args.constructAlignedChunkReadersMemTime === "number") {
                this.constructAlignedChunkReadersMemTime = new Int64(args.constructAlignedChunkReadersMemTime);
            }
            else {
                this.constructAlignedChunkReadersMemTime = args.constructAlignedChunkReadersMemTime;
            }
        }
        if (args != null && args.pageReadersDecodeAlignedDiskCount != null) {
            if (typeof args.pageReadersDecodeAlignedDiskCount === "number") {
                this.pageReadersDecodeAlignedDiskCount = new Int64(args.pageReadersDecodeAlignedDiskCount);
            }
            else {
                this.pageReadersDecodeAlignedDiskCount = args.pageReadersDecodeAlignedDiskCount;
            }
        }
        if (args != null && args.pageReadersDecodeAlignedDiskTime != null) {
            if (typeof args.pageReadersDecodeAlignedDiskTime === "number") {
                this.pageReadersDecodeAlignedDiskTime = new Int64(args.pageReadersDecodeAlignedDiskTime);
            }
            else {
                this.pageReadersDecodeAlignedDiskTime = args.pageReadersDecodeAlignedDiskTime;
            }
        }
        if (args != null && args.pageReadersDecodeAlignedMemCount != null) {
            if (typeof args.pageReadersDecodeAlignedMemCount === "number") {
                this.pageReadersDecodeAlignedMemCount = new Int64(args.pageReadersDecodeAlignedMemCount);
            }
            else {
                this.pageReadersDecodeAlignedMemCount = args.pageReadersDecodeAlignedMemCount;
            }
        }
        if (args != null && args.pageReadersDecodeAlignedMemTime != null) {
            if (typeof args.pageReadersDecodeAlignedMemTime === "number") {
                this.pageReadersDecodeAlignedMemTime = new Int64(args.pageReadersDecodeAlignedMemTime);
            }
            else {
                this.pageReadersDecodeAlignedMemTime = args.pageReadersDecodeAlignedMemTime;
            }
        }
        if (args != null && args.pageReadersDecodeNonAlignedDiskCount != null) {
            if (typeof args.pageReadersDecodeNonAlignedDiskCount === "number") {
                this.pageReadersDecodeNonAlignedDiskCount = new Int64(args.pageReadersDecodeNonAlignedDiskCount);
            }
            else {
                this.pageReadersDecodeNonAlignedDiskCount = args.pageReadersDecodeNonAlignedDiskCount;
            }
        }
        if (args != null && args.pageReadersDecodeNonAlignedDiskTime != null) {
            if (typeof args.pageReadersDecodeNonAlignedDiskTime === "number") {
                this.pageReadersDecodeNonAlignedDiskTime = new Int64(args.pageReadersDecodeNonAlignedDiskTime);
            }
            else {
                this.pageReadersDecodeNonAlignedDiskTime = args.pageReadersDecodeNonAlignedDiskTime;
            }
        }
        if (args != null && args.pageReadersDecodeNonAlignedMemCount != null) {
            if (typeof args.pageReadersDecodeNonAlignedMemCount === "number") {
                this.pageReadersDecodeNonAlignedMemCount = new Int64(args.pageReadersDecodeNonAlignedMemCount);
            }
            else {
                this.pageReadersDecodeNonAlignedMemCount = args.pageReadersDecodeNonAlignedMemCount;
            }
        }
        if (args != null && args.pageReadersDecodeNonAlignedMemTime != null) {
            if (typeof args.pageReadersDecodeNonAlignedMemTime === "number") {
                this.pageReadersDecodeNonAlignedMemTime = new Int64(args.pageReadersDecodeNonAlignedMemTime);
            }
            else {
                this.pageReadersDecodeNonAlignedMemTime = args.pageReadersDecodeNonAlignedMemTime;
            }
        }
        if (args != null && args.pageReaderMaxUsedMemorySize != null) {
            if (typeof args.pageReaderMaxUsedMemorySize === "number") {
                this.pageReaderMaxUsedMemorySize = new Int64(args.pageReaderMaxUsedMemorySize);
            }
            else {
                this.pageReaderMaxUsedMemorySize = args.pageReaderMaxUsedMemorySize;
            }
        }
        if (args != null && args.alignedTimeSeriesMetadataModificationCount != null) {
            if (typeof args.alignedTimeSeriesMetadataModificationCount === "number") {
                this.alignedTimeSeriesMetadataModificationCount = new Int64(args.alignedTimeSeriesMetadataModificationCount);
            }
            else {
                this.alignedTimeSeriesMetadataModificationCount = args.alignedTimeSeriesMetadataModificationCount;
            }
        }
        if (args != null && args.alignedTimeSeriesMetadataModificationTime != null) {
            if (typeof args.alignedTimeSeriesMetadataModificationTime === "number") {
                this.alignedTimeSeriesMetadataModificationTime = new Int64(args.alignedTimeSeriesMetadataModificationTime);
            }
            else {
                this.alignedTimeSeriesMetadataModificationTime = args.alignedTimeSeriesMetadataModificationTime;
            }
        }
        if (args != null && args.nonAlignedTimeSeriesMetadataModificationCount != null) {
            if (typeof args.nonAlignedTimeSeriesMetadataModificationCount === "number") {
                this.nonAlignedTimeSeriesMetadataModificationCount = new Int64(args.nonAlignedTimeSeriesMetadataModificationCount);
            }
            else {
                this.nonAlignedTimeSeriesMetadataModificationCount = args.nonAlignedTimeSeriesMetadataModificationCount;
            }
        }
        if (args != null && args.nonAlignedTimeSeriesMetadataModificationTime != null) {
            if (typeof args.nonAlignedTimeSeriesMetadataModificationTime === "number") {
                this.nonAlignedTimeSeriesMetadataModificationTime = new Int64(args.nonAlignedTimeSeriesMetadataModificationTime);
            }
            else {
                this.nonAlignedTimeSeriesMetadataModificationTime = args.nonAlignedTimeSeriesMetadataModificationTime;
            }
        }
        if (args != null && args.loadBloomFilterFromCacheCount != null) {
            if (typeof args.loadBloomFilterFromCacheCount === "number") {
                this.loadBloomFilterFromCacheCount = new Int64(args.loadBloomFilterFromCacheCount);
            }
            else {
                this.loadBloomFilterFromCacheCount = args.loadBloomFilterFromCacheCount;
            }
        }
        if (args != null && args.loadBloomFilterFromDiskCount != null) {
            if (typeof args.loadBloomFilterFromDiskCount === "number") {
                this.loadBloomFilterFromDiskCount = new Int64(args.loadBloomFilterFromDiskCount);
            }
            else {
                this.loadBloomFilterFromDiskCount = args.loadBloomFilterFromDiskCount;
            }
        }
        if (args != null && args.loadBloomFilterActualIOSize != null) {
            if (typeof args.loadBloomFilterActualIOSize === "number") {
                this.loadBloomFilterActualIOSize = new Int64(args.loadBloomFilterActualIOSize);
            }
            else {
                this.loadBloomFilterActualIOSize = args.loadBloomFilterActualIOSize;
            }
        }
        if (args != null && args.loadBloomFilterTime != null) {
            if (typeof args.loadBloomFilterTime === "number") {
                this.loadBloomFilterTime = new Int64(args.loadBloomFilterTime);
            }
            else {
                this.loadBloomFilterTime = args.loadBloomFilterTime;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataFromCacheCount != null) {
            if (typeof args.loadTimeSeriesMetadataFromCacheCount === "number") {
                this.loadTimeSeriesMetadataFromCacheCount = new Int64(args.loadTimeSeriesMetadataFromCacheCount);
            }
            else {
                this.loadTimeSeriesMetadataFromCacheCount = args.loadTimeSeriesMetadataFromCacheCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataFromDiskCount != null) {
            if (typeof args.loadTimeSeriesMetadataFromDiskCount === "number") {
                this.loadTimeSeriesMetadataFromDiskCount = new Int64(args.loadTimeSeriesMetadataFromDiskCount);
            }
            else {
                this.loadTimeSeriesMetadataFromDiskCount = args.loadTimeSeriesMetadataFromDiskCount;
            }
        }
        if (args != null && args.loadTimeSeriesMetadataActualIOSize != null) {
            if (typeof args.loadTimeSeriesMetadataActualIOSize === "number") {
                this.loadTimeSeriesMetadataActualIOSize = new Int64(args.loadTimeSeriesMetadataActualIOSize);
            }
            else {
                this.loadTimeSeriesMetadataActualIOSize = args.loadTimeSeriesMetadataActualIOSize;
            }
        }
        if (args != null && args.loadChunkFromCacheCount != null) {
            if (typeof args.loadChunkFromCacheCount === "number") {
                this.loadChunkFromCacheCount = new Int64(args.loadChunkFromCacheCount);
            }
            else {
                this.loadChunkFromCacheCount = args.loadChunkFromCacheCount;
            }
        }
        if (args != null && args.loadChunkFromDiskCount != null) {
            if (typeof args.loadChunkFromDiskCount === "number") {
                this.loadChunkFromDiskCount = new Int64(args.loadChunkFromDiskCount);
            }
            else {
                this.loadChunkFromDiskCount = args.loadChunkFromDiskCount;
            }
        }
        if (args != null && args.loadChunkActualIOSize != null) {
            if (typeof args.loadChunkActualIOSize === "number") {
                this.loadChunkActualIOSize = new Int64(args.loadChunkActualIOSize);
            }
            else {
                this.loadChunkActualIOSize = args.loadChunkActualIOSize;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TQueryStatistics");
        if (this.loadTimeSeriesMetadataDiskSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataDiskSeqCount", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.loadTimeSeriesMetadataDiskSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataDiskUnSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataDiskUnSeqCount", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.loadTimeSeriesMetadataDiskUnSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataMemSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataMemSeqCount", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.loadTimeSeriesMetadataMemSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataMemUnSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataMemUnSeqCount", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.loadTimeSeriesMetadataMemUnSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedDiskSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedDiskSeqCount", thrift.Thrift.Type.I64, 5);
            output.writeI64(this.loadTimeSeriesMetadataAlignedDiskSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedDiskUnSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedDiskUnSeqCount", thrift.Thrift.Type.I64, 6);
            output.writeI64(this.loadTimeSeriesMetadataAlignedDiskUnSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedMemSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedMemSeqCount", thrift.Thrift.Type.I64, 7);
            output.writeI64(this.loadTimeSeriesMetadataAlignedMemSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedMemUnSeqCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedMemUnSeqCount", thrift.Thrift.Type.I64, 8);
            output.writeI64(this.loadTimeSeriesMetadataAlignedMemUnSeqCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataDiskSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataDiskSeqTime", thrift.Thrift.Type.I64, 9);
            output.writeI64(this.loadTimeSeriesMetadataDiskSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataDiskUnSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataDiskUnSeqTime", thrift.Thrift.Type.I64, 10);
            output.writeI64(this.loadTimeSeriesMetadataDiskUnSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataMemSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataMemSeqTime", thrift.Thrift.Type.I64, 11);
            output.writeI64(this.loadTimeSeriesMetadataMemSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataMemUnSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataMemUnSeqTime", thrift.Thrift.Type.I64, 12);
            output.writeI64(this.loadTimeSeriesMetadataMemUnSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedDiskSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedDiskSeqTime", thrift.Thrift.Type.I64, 13);
            output.writeI64(this.loadTimeSeriesMetadataAlignedDiskSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedDiskUnSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedDiskUnSeqTime", thrift.Thrift.Type.I64, 14);
            output.writeI64(this.loadTimeSeriesMetadataAlignedDiskUnSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedMemSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedMemSeqTime", thrift.Thrift.Type.I64, 15);
            output.writeI64(this.loadTimeSeriesMetadataAlignedMemSeqTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataAlignedMemUnSeqTime != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataAlignedMemUnSeqTime", thrift.Thrift.Type.I64, 16);
            output.writeI64(this.loadTimeSeriesMetadataAlignedMemUnSeqTime);
            output.writeFieldEnd();
        }
        if (this.constructNonAlignedChunkReadersDiskCount != null) {
            output.writeFieldBegin("constructNonAlignedChunkReadersDiskCount", thrift.Thrift.Type.I64, 17);
            output.writeI64(this.constructNonAlignedChunkReadersDiskCount);
            output.writeFieldEnd();
        }
        if (this.constructNonAlignedChunkReadersMemCount != null) {
            output.writeFieldBegin("constructNonAlignedChunkReadersMemCount", thrift.Thrift.Type.I64, 18);
            output.writeI64(this.constructNonAlignedChunkReadersMemCount);
            output.writeFieldEnd();
        }
        if (this.constructAlignedChunkReadersDiskCount != null) {
            output.writeFieldBegin("constructAlignedChunkReadersDiskCount", thrift.Thrift.Type.I64, 19);
            output.writeI64(this.constructAlignedChunkReadersDiskCount);
            output.writeFieldEnd();
        }
        if (this.constructAlignedChunkReadersMemCount != null) {
            output.writeFieldBegin("constructAlignedChunkReadersMemCount", thrift.Thrift.Type.I64, 20);
            output.writeI64(this.constructAlignedChunkReadersMemCount);
            output.writeFieldEnd();
        }
        if (this.constructNonAlignedChunkReadersDiskTime != null) {
            output.writeFieldBegin("constructNonAlignedChunkReadersDiskTime", thrift.Thrift.Type.I64, 21);
            output.writeI64(this.constructNonAlignedChunkReadersDiskTime);
            output.writeFieldEnd();
        }
        if (this.constructNonAlignedChunkReadersMemTime != null) {
            output.writeFieldBegin("constructNonAlignedChunkReadersMemTime", thrift.Thrift.Type.I64, 22);
            output.writeI64(this.constructNonAlignedChunkReadersMemTime);
            output.writeFieldEnd();
        }
        if (this.constructAlignedChunkReadersDiskTime != null) {
            output.writeFieldBegin("constructAlignedChunkReadersDiskTime", thrift.Thrift.Type.I64, 23);
            output.writeI64(this.constructAlignedChunkReadersDiskTime);
            output.writeFieldEnd();
        }
        if (this.constructAlignedChunkReadersMemTime != null) {
            output.writeFieldBegin("constructAlignedChunkReadersMemTime", thrift.Thrift.Type.I64, 24);
            output.writeI64(this.constructAlignedChunkReadersMemTime);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeAlignedDiskCount != null) {
            output.writeFieldBegin("pageReadersDecodeAlignedDiskCount", thrift.Thrift.Type.I64, 25);
            output.writeI64(this.pageReadersDecodeAlignedDiskCount);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeAlignedDiskTime != null) {
            output.writeFieldBegin("pageReadersDecodeAlignedDiskTime", thrift.Thrift.Type.I64, 26);
            output.writeI64(this.pageReadersDecodeAlignedDiskTime);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeAlignedMemCount != null) {
            output.writeFieldBegin("pageReadersDecodeAlignedMemCount", thrift.Thrift.Type.I64, 27);
            output.writeI64(this.pageReadersDecodeAlignedMemCount);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeAlignedMemTime != null) {
            output.writeFieldBegin("pageReadersDecodeAlignedMemTime", thrift.Thrift.Type.I64, 28);
            output.writeI64(this.pageReadersDecodeAlignedMemTime);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeNonAlignedDiskCount != null) {
            output.writeFieldBegin("pageReadersDecodeNonAlignedDiskCount", thrift.Thrift.Type.I64, 29);
            output.writeI64(this.pageReadersDecodeNonAlignedDiskCount);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeNonAlignedDiskTime != null) {
            output.writeFieldBegin("pageReadersDecodeNonAlignedDiskTime", thrift.Thrift.Type.I64, 30);
            output.writeI64(this.pageReadersDecodeNonAlignedDiskTime);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeNonAlignedMemCount != null) {
            output.writeFieldBegin("pageReadersDecodeNonAlignedMemCount", thrift.Thrift.Type.I64, 31);
            output.writeI64(this.pageReadersDecodeNonAlignedMemCount);
            output.writeFieldEnd();
        }
        if (this.pageReadersDecodeNonAlignedMemTime != null) {
            output.writeFieldBegin("pageReadersDecodeNonAlignedMemTime", thrift.Thrift.Type.I64, 32);
            output.writeI64(this.pageReadersDecodeNonAlignedMemTime);
            output.writeFieldEnd();
        }
        if (this.pageReaderMaxUsedMemorySize != null) {
            output.writeFieldBegin("pageReaderMaxUsedMemorySize", thrift.Thrift.Type.I64, 33);
            output.writeI64(this.pageReaderMaxUsedMemorySize);
            output.writeFieldEnd();
        }
        if (this.alignedTimeSeriesMetadataModificationCount != null) {
            output.writeFieldBegin("alignedTimeSeriesMetadataModificationCount", thrift.Thrift.Type.I64, 34);
            output.writeI64(this.alignedTimeSeriesMetadataModificationCount);
            output.writeFieldEnd();
        }
        if (this.alignedTimeSeriesMetadataModificationTime != null) {
            output.writeFieldBegin("alignedTimeSeriesMetadataModificationTime", thrift.Thrift.Type.I64, 35);
            output.writeI64(this.alignedTimeSeriesMetadataModificationTime);
            output.writeFieldEnd();
        }
        if (this.nonAlignedTimeSeriesMetadataModificationCount != null) {
            output.writeFieldBegin("nonAlignedTimeSeriesMetadataModificationCount", thrift.Thrift.Type.I64, 36);
            output.writeI64(this.nonAlignedTimeSeriesMetadataModificationCount);
            output.writeFieldEnd();
        }
        if (this.nonAlignedTimeSeriesMetadataModificationTime != null) {
            output.writeFieldBegin("nonAlignedTimeSeriesMetadataModificationTime", thrift.Thrift.Type.I64, 37);
            output.writeI64(this.nonAlignedTimeSeriesMetadataModificationTime);
            output.writeFieldEnd();
        }
        if (this.loadBloomFilterFromCacheCount != null) {
            output.writeFieldBegin("loadBloomFilterFromCacheCount", thrift.Thrift.Type.I64, 38);
            output.writeI64(this.loadBloomFilterFromCacheCount);
            output.writeFieldEnd();
        }
        if (this.loadBloomFilterFromDiskCount != null) {
            output.writeFieldBegin("loadBloomFilterFromDiskCount", thrift.Thrift.Type.I64, 39);
            output.writeI64(this.loadBloomFilterFromDiskCount);
            output.writeFieldEnd();
        }
        if (this.loadBloomFilterActualIOSize != null) {
            output.writeFieldBegin("loadBloomFilterActualIOSize", thrift.Thrift.Type.I64, 40);
            output.writeI64(this.loadBloomFilterActualIOSize);
            output.writeFieldEnd();
        }
        if (this.loadBloomFilterTime != null) {
            output.writeFieldBegin("loadBloomFilterTime", thrift.Thrift.Type.I64, 41);
            output.writeI64(this.loadBloomFilterTime);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataFromCacheCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataFromCacheCount", thrift.Thrift.Type.I64, 42);
            output.writeI64(this.loadTimeSeriesMetadataFromCacheCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataFromDiskCount != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataFromDiskCount", thrift.Thrift.Type.I64, 43);
            output.writeI64(this.loadTimeSeriesMetadataFromDiskCount);
            output.writeFieldEnd();
        }
        if (this.loadTimeSeriesMetadataActualIOSize != null) {
            output.writeFieldBegin("loadTimeSeriesMetadataActualIOSize", thrift.Thrift.Type.I64, 44);
            output.writeI64(this.loadTimeSeriesMetadataActualIOSize);
            output.writeFieldEnd();
        }
        if (this.loadChunkFromCacheCount != null) {
            output.writeFieldBegin("loadChunkFromCacheCount", thrift.Thrift.Type.I64, 45);
            output.writeI64(this.loadChunkFromCacheCount);
            output.writeFieldEnd();
        }
        if (this.loadChunkFromDiskCount != null) {
            output.writeFieldBegin("loadChunkFromDiskCount", thrift.Thrift.Type.I64, 46);
            output.writeI64(this.loadChunkFromDiskCount);
            output.writeFieldEnd();
        }
        if (this.loadChunkActualIOSize != null) {
            output.writeFieldBegin("loadChunkActualIOSize", thrift.Thrift.Type.I64, 47);
            output.writeI64(this.loadChunkActualIOSize);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TQueryStatistics {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataDiskSeqCount = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataDiskUnSeqCount = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataMemSeqCount = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataMemUnSeqCount = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_5: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedDiskSeqCount = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_6: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedDiskUnSeqCount = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_7: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedMemSeqCount = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_8: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedMemUnSeqCount = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_9: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataDiskSeqTime = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_10: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataDiskUnSeqTime = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataMemSeqTime = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_12: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataMemUnSeqTime = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_13: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedDiskSeqTime = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_14: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedDiskUnSeqTime = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_15: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedMemSeqTime = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_16: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataAlignedMemUnSeqTime = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 17:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_17: Int64 = input.readI64();
                        _args.constructNonAlignedChunkReadersDiskCount = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 18:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_18: Int64 = input.readI64();
                        _args.constructNonAlignedChunkReadersMemCount = value_18;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 19:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_19: Int64 = input.readI64();
                        _args.constructAlignedChunkReadersDiskCount = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 20:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_20: Int64 = input.readI64();
                        _args.constructAlignedChunkReadersMemCount = value_20;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 21:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_21: Int64 = input.readI64();
                        _args.constructNonAlignedChunkReadersDiskTime = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 22:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_22: Int64 = input.readI64();
                        _args.constructNonAlignedChunkReadersMemTime = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 23:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_23: Int64 = input.readI64();
                        _args.constructAlignedChunkReadersDiskTime = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 24:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_24: Int64 = input.readI64();
                        _args.constructAlignedChunkReadersMemTime = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 25:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_25: Int64 = input.readI64();
                        _args.pageReadersDecodeAlignedDiskCount = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 26:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_26: Int64 = input.readI64();
                        _args.pageReadersDecodeAlignedDiskTime = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 27:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_27: Int64 = input.readI64();
                        _args.pageReadersDecodeAlignedMemCount = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 28:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_28: Int64 = input.readI64();
                        _args.pageReadersDecodeAlignedMemTime = value_28;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 29:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_29: Int64 = input.readI64();
                        _args.pageReadersDecodeNonAlignedDiskCount = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 30:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_30: Int64 = input.readI64();
                        _args.pageReadersDecodeNonAlignedDiskTime = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 31:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_31: Int64 = input.readI64();
                        _args.pageReadersDecodeNonAlignedMemCount = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 32:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_32: Int64 = input.readI64();
                        _args.pageReadersDecodeNonAlignedMemTime = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 33:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_33: Int64 = input.readI64();
                        _args.pageReaderMaxUsedMemorySize = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 34:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_34: Int64 = input.readI64();
                        _args.alignedTimeSeriesMetadataModificationCount = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 35:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_35: Int64 = input.readI64();
                        _args.alignedTimeSeriesMetadataModificationTime = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 36:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_36: Int64 = input.readI64();
                        _args.nonAlignedTimeSeriesMetadataModificationCount = value_36;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 37:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_37: Int64 = input.readI64();
                        _args.nonAlignedTimeSeriesMetadataModificationTime = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 38:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_38: Int64 = input.readI64();
                        _args.loadBloomFilterFromCacheCount = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 39:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_39: Int64 = input.readI64();
                        _args.loadBloomFilterFromDiskCount = value_39;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 40:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_40: Int64 = input.readI64();
                        _args.loadBloomFilterActualIOSize = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 41:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_41: Int64 = input.readI64();
                        _args.loadBloomFilterTime = value_41;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 42:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_42: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataFromCacheCount = value_42;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 43:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_43: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataFromDiskCount = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 44:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_44: Int64 = input.readI64();
                        _args.loadTimeSeriesMetadataActualIOSize = value_44;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 45:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_45: Int64 = input.readI64();
                        _args.loadChunkFromCacheCount = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 46:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_46: Int64 = input.readI64();
                        _args.loadChunkFromDiskCount = value_46;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 47:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_47: Int64 = input.readI64();
                        _args.loadChunkActualIOSize = value_47;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new TQueryStatistics(_args);
    }
}
