/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
export interface ITFragmentInstanceIdArgs {
    queryId: string;
    fragmentId: number;
    instanceId: string;
}
export class TFragmentInstanceId {
    public queryId: string;
    public fragmentId: number;
    public instanceId: string;
    constructor(args: ITFragmentInstanceIdArgs) {
        if (args != null && args.queryId != null) {
            this.queryId = args.queryId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[queryId] is unset!");
        }
        if (args != null && args.fragmentId != null) {
            this.fragmentId = args.fragmentId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[fragmentId] is unset!");
        }
        if (args != null && args.instanceId != null) {
            this.instanceId = args.instanceId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[instanceId] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TFragmentInstanceId");
        if (this.queryId != null) {
            output.writeFieldBegin("queryId", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.queryId);
            output.writeFieldEnd();
        }
        if (this.fragmentId != null) {
            output.writeFieldBegin("fragmentId", thrift.Thrift.Type.I32, 2);
            output.writeI32(this.fragmentId);
            output.writeFieldEnd();
        }
        if (this.instanceId != null) {
            output.writeFieldBegin("instanceId", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.instanceId);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TFragmentInstanceId {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.queryId = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2: number = input.readI32();
                        _args.fragmentId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_3: string = input.readString();
                        _args.instanceId = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.queryId !== undefined && _args.fragmentId !== undefined && _args.instanceId !== undefined) {
            return new TFragmentInstanceId(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TFragmentInstanceId from input");
        }
    }
}
