/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITRegionMigrateResultArgs {
    regionId?: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId;
    migrateResult?: org_apache_iotdb_common_rpc_thrift.TSStatus;
    failedNodeAndReason?: Map<org_apache_iotdb_common_rpc_thrift.TDataNodeLocation, org_apache_iotdb_common_rpc_thrift.TRegionMigrateFailedType>;
    taskStatus: org_apache_iotdb_common_rpc_thrift.TRegionMaintainTaskStatus;
}
export class TRegionMigrateResult {
    public regionId?: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId;
    public migrateResult?: org_apache_iotdb_common_rpc_thrift.TSStatus;
    public failedNodeAndReason?: Map<org_apache_iotdb_common_rpc_thrift.TDataNodeLocation, org_apache_iotdb_common_rpc_thrift.TRegionMigrateFailedType>;
    public taskStatus: org_apache_iotdb_common_rpc_thrift.TRegionMaintainTaskStatus;
    constructor(args: ITRegionMigrateResultArgs) {
        if (args != null && args.regionId != null) {
            this.regionId = args.regionId;
        }
        if (args != null && args.migrateResult != null) {
            this.migrateResult = args.migrateResult;
        }
        if (args != null && args.failedNodeAndReason != null) {
            this.failedNodeAndReason = args.failedNodeAndReason;
        }
        if (args != null && args.taskStatus != null) {
            this.taskStatus = args.taskStatus;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[taskStatus] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TRegionMigrateResult");
        if (this.regionId != null) {
            output.writeFieldBegin("regionId", thrift.Thrift.Type.STRUCT, 1);
            this.regionId.write(output);
            output.writeFieldEnd();
        }
        if (this.migrateResult != null) {
            output.writeFieldBegin("migrateResult", thrift.Thrift.Type.STRUCT, 2);
            this.migrateResult.write(output);
            output.writeFieldEnd();
        }
        if (this.failedNodeAndReason != null) {
            output.writeFieldBegin("failedNodeAndReason", thrift.Thrift.Type.MAP, 3);
            output.writeMapBegin(thrift.Thrift.Type.STRUCT, thrift.Thrift.Type.I32, this.failedNodeAndReason.size);
            this.failedNodeAndReason.forEach((value_1: org_apache_iotdb_common_rpc_thrift.TRegionMigrateFailedType, key_1: org_apache_iotdb_common_rpc_thrift.TDataNodeLocation): void => {
                key_1.write(output);
                output.writeI32(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.taskStatus != null) {
            output.writeFieldBegin("taskStatus", thrift.Thrift.Type.I32, 4);
            output.writeI32(this.taskStatus);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TRegionMigrateResult {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_2: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId = org_apache_iotdb_common_rpc_thrift.TConsensusGroupId.read(input);
                        _args.regionId = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_3: org_apache_iotdb_common_rpc_thrift.TSStatus = org_apache_iotdb_common_rpc_thrift.TSStatus.read(input);
                        _args.migrateResult = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_4: Map<org_apache_iotdb_common_rpc_thrift.TDataNodeLocation, org_apache_iotdb_common_rpc_thrift.TRegionMigrateFailedType> = new Map<org_apache_iotdb_common_rpc_thrift.TDataNodeLocation, org_apache_iotdb_common_rpc_thrift.TRegionMigrateFailedType>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_2: org_apache_iotdb_common_rpc_thrift.TDataNodeLocation = org_apache_iotdb_common_rpc_thrift.TDataNodeLocation.read(input);
                            const value_5: org_apache_iotdb_common_rpc_thrift.TRegionMigrateFailedType = input.readI32();
                            value_4.set(key_2, value_5);
                        }
                        input.readMapEnd();
                        _args.failedNodeAndReason = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_6: org_apache_iotdb_common_rpc_thrift.TRegionMaintainTaskStatus = input.readI32();
                        _args.taskStatus = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.taskStatus !== undefined) {
            return new TRegionMigrateResult(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TRegionMigrateResult from input");
        }
    }
}
