/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITPushTopicMetaRespExceptionMessageArgs {
    topicName: string;
    message: string;
    timeStamp: number | Int64;
}
export class TPushTopicMetaRespExceptionMessage {
    public topicName: string;
    public message: string;
    public timeStamp: Int64;
    constructor(args: ITPushTopicMetaRespExceptionMessageArgs) {
        if (args != null && args.topicName != null) {
            this.topicName = args.topicName;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[topicName] is unset!");
        }
        if (args != null && args.message != null) {
            this.message = args.message;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[message] is unset!");
        }
        if (args != null && args.timeStamp != null) {
            if (typeof args.timeStamp === "number") {
                this.timeStamp = new Int64(args.timeStamp);
            }
            else {
                this.timeStamp = args.timeStamp;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timeStamp] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TPushTopicMetaRespExceptionMessage");
        if (this.topicName != null) {
            output.writeFieldBegin("topicName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.topicName);
            output.writeFieldEnd();
        }
        if (this.message != null) {
            output.writeFieldBegin("message", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.message);
            output.writeFieldEnd();
        }
        if (this.timeStamp != null) {
            output.writeFieldBegin("timeStamp", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.timeStamp);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TPushTopicMetaRespExceptionMessage {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.topicName = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2: string = input.readString();
                        _args.message = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.timeStamp = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.topicName !== undefined && _args.message !== undefined && _args.timeStamp !== undefined) {
            return new TPushTopicMetaRespExceptionMessage(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TPushTopicMetaRespExceptionMessage from input");
        }
    }
}
