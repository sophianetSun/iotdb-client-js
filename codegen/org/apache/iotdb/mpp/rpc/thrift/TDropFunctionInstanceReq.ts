/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
export interface ITDropFunctionInstanceReqArgs {
    functionName: string;
    needToDeleteJar: boolean;
    model?: org_apache_iotdb_common_rpc_thrift.Model;
}
export class TDropFunctionInstanceReq {
    public functionName: string;
    public needToDeleteJar: boolean;
    public model?: org_apache_iotdb_common_rpc_thrift.Model;
    constructor(args: ITDropFunctionInstanceReqArgs) {
        if (args != null && args.functionName != null) {
            this.functionName = args.functionName;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[functionName] is unset!");
        }
        if (args != null && args.needToDeleteJar != null) {
            this.needToDeleteJar = args.needToDeleteJar;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[needToDeleteJar] is unset!");
        }
        if (args != null && args.model != null) {
            this.model = args.model;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TDropFunctionInstanceReq");
        if (this.functionName != null) {
            output.writeFieldBegin("functionName", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.functionName);
            output.writeFieldEnd();
        }
        if (this.needToDeleteJar != null) {
            output.writeFieldBegin("needToDeleteJar", thrift.Thrift.Type.BOOL, 2);
            output.writeBool(this.needToDeleteJar);
            output.writeFieldEnd();
        }
        if (this.model != null) {
            output.writeFieldBegin("model", thrift.Thrift.Type.I32, 3);
            output.writeI32(this.model);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TDropFunctionInstanceReq {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.functionName = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.BOOL) {
                        const value_2: boolean = input.readBool();
                        _args.needToDeleteJar = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_3: org_apache_iotdb_common_rpc_thrift.Model = input.readI32();
                        _args.model = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.functionName !== undefined && _args.needToDeleteJar !== undefined) {
            return new TDropFunctionInstanceReq(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TDropFunctionInstanceReq from input");
        }
    }
}
