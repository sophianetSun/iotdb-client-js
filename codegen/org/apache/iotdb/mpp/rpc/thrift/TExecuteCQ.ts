/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
export interface ITExecuteCQArgs {
    queryBody: string;
    startTime: number | Int64;
    endTime: number | Int64;
    timeout: number | Int64;
    zoneId: string;
    cqId: string;
    username: string;
}
export class TExecuteCQ {
    public queryBody: string;
    public startTime: Int64;
    public endTime: Int64;
    public timeout: Int64;
    public zoneId: string;
    public cqId: string;
    public username: string;
    constructor(args: ITExecuteCQArgs) {
        if (args != null && args.queryBody != null) {
            this.queryBody = args.queryBody;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[queryBody] is unset!");
        }
        if (args != null && args.startTime != null) {
            if (typeof args.startTime === "number") {
                this.startTime = new Int64(args.startTime);
            }
            else {
                this.startTime = args.startTime;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[startTime] is unset!");
        }
        if (args != null && args.endTime != null) {
            if (typeof args.endTime === "number") {
                this.endTime = new Int64(args.endTime);
            }
            else {
                this.endTime = args.endTime;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[endTime] is unset!");
        }
        if (args != null && args.timeout != null) {
            if (typeof args.timeout === "number") {
                this.timeout = new Int64(args.timeout);
            }
            else {
                this.timeout = args.timeout;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[timeout] is unset!");
        }
        if (args != null && args.zoneId != null) {
            this.zoneId = args.zoneId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[zoneId] is unset!");
        }
        if (args != null && args.cqId != null) {
            this.cqId = args.cqId;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[cqId] is unset!");
        }
        if (args != null && args.username != null) {
            this.username = args.username;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[username] is unset!");
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TExecuteCQ");
        if (this.queryBody != null) {
            output.writeFieldBegin("queryBody", thrift.Thrift.Type.STRING, 1);
            output.writeString(this.queryBody);
            output.writeFieldEnd();
        }
        if (this.startTime != null) {
            output.writeFieldBegin("startTime", thrift.Thrift.Type.I64, 2);
            output.writeI64(this.startTime);
            output.writeFieldEnd();
        }
        if (this.endTime != null) {
            output.writeFieldBegin("endTime", thrift.Thrift.Type.I64, 3);
            output.writeI64(this.endTime);
            output.writeFieldEnd();
        }
        if (this.timeout != null) {
            output.writeFieldBegin("timeout", thrift.Thrift.Type.I64, 4);
            output.writeI64(this.timeout);
            output.writeFieldEnd();
        }
        if (this.zoneId != null) {
            output.writeFieldBegin("zoneId", thrift.Thrift.Type.STRING, 5);
            output.writeString(this.zoneId);
            output.writeFieldEnd();
        }
        if (this.cqId != null) {
            output.writeFieldBegin("cqId", thrift.Thrift.Type.STRING, 6);
            output.writeString(this.cqId);
            output.writeFieldEnd();
        }
        if (this.username != null) {
            output.writeFieldBegin("username", thrift.Thrift.Type.STRING, 7);
            output.writeString(this.username);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TExecuteCQ {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1: string = input.readString();
                        _args.queryBody = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_2: Int64 = input.readI64();
                        _args.startTime = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3: Int64 = input.readI64();
                        _args.endTime = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4: Int64 = input.readI64();
                        _args.timeout = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5: string = input.readString();
                        _args.zoneId = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6: string = input.readString();
                        _args.cqId = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_7: string = input.readString();
                        _args.username = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.queryBody !== undefined && _args.startTime !== undefined && _args.endTime !== undefined && _args.timeout !== undefined && _args.zoneId !== undefined && _args.cqId !== undefined && _args.username !== undefined) {
            return new TExecuteCQ(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TExecuteCQ from input");
        }
    }
}
