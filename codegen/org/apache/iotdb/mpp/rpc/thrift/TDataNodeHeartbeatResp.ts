/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.6
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import Int64 = require("node-int64");
import * as thrift from "thrift";
import * as org_apache_iotdb_common_rpc_thrift from "./../../../common/rpc/thrift";
import * as TSchemaLimitLevel from "./TSchemaLimitLevel";
export interface ITDataNodeHeartbeatRespArgs {
    heartbeatTimestamp: number | Int64;
    status: string;
    statusReason?: string;
    judgedLeaders?: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, boolean>;
    loadSample?: org_apache_iotdb_common_rpc_thrift.TLoadSample;
    regionSeriesUsageMap?: Map<number, number | Int64>;
    regionDeviceUsageMap?: Map<number, number | Int64>;
    regionDisk?: Map<number, number | Int64>;
    schemaLimitLevel?: TSchemaLimitLevel.TSchemaLimitLevel;
    pipeMetaList?: Array<Buffer>;
    activateStatus?: string;
    confirmedConfigNodeEndPoints?: Set<org_apache_iotdb_common_rpc_thrift.TEndPoint>;
    consensusLogicalTimeMap?: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, number | Int64>;
    pipeCompletedList?: Array<boolean>;
    pipeRemainingEventCountList?: Array<number | Int64>;
    pipeRemainingTimeList?: Array<number>;
}
export class TDataNodeHeartbeatResp {
    public heartbeatTimestamp: Int64;
    public status: string;
    public statusReason?: string;
    public judgedLeaders?: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, boolean>;
    public loadSample?: org_apache_iotdb_common_rpc_thrift.TLoadSample;
    public regionSeriesUsageMap?: Map<number, Int64>;
    public regionDeviceUsageMap?: Map<number, Int64>;
    public regionDisk?: Map<number, Int64>;
    public schemaLimitLevel?: TSchemaLimitLevel.TSchemaLimitLevel;
    public pipeMetaList?: Array<Buffer>;
    public activateStatus?: string;
    public confirmedConfigNodeEndPoints?: Set<org_apache_iotdb_common_rpc_thrift.TEndPoint>;
    public consensusLogicalTimeMap?: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, Int64>;
    public pipeCompletedList?: Array<boolean>;
    public pipeRemainingEventCountList?: Array<Int64>;
    public pipeRemainingTimeList?: Array<number>;
    constructor(args: ITDataNodeHeartbeatRespArgs) {
        if (args != null && args.heartbeatTimestamp != null) {
            if (typeof args.heartbeatTimestamp === "number") {
                this.heartbeatTimestamp = new Int64(args.heartbeatTimestamp);
            }
            else {
                this.heartbeatTimestamp = args.heartbeatTimestamp;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[heartbeatTimestamp] is unset!");
        }
        if (args != null && args.status != null) {
            this.status = args.status;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Required field[status] is unset!");
        }
        if (args != null && args.statusReason != null) {
            this.statusReason = args.statusReason;
        }
        if (args != null && args.judgedLeaders != null) {
            this.judgedLeaders = args.judgedLeaders;
        }
        if (args != null && args.loadSample != null) {
            this.loadSample = args.loadSample;
        }
        if (args != null && args.regionSeriesUsageMap != null) {
            this.regionSeriesUsageMap = args.regionSeriesUsageMap;
        }
        if (args != null && args.regionDeviceUsageMap != null) {
            this.regionDeviceUsageMap = args.regionDeviceUsageMap;
        }
        if (args != null && args.regionDisk != null) {
            this.regionDisk = args.regionDisk;
        }
        if (args != null && args.schemaLimitLevel != null) {
            this.schemaLimitLevel = args.schemaLimitLevel;
        }
        if (args != null && args.pipeMetaList != null) {
            this.pipeMetaList = args.pipeMetaList;
        }
        if (args != null && args.activateStatus != null) {
            this.activateStatus = args.activateStatus;
        }
        if (args != null && args.confirmedConfigNodeEndPoints != null) {
            this.confirmedConfigNodeEndPoints = args.confirmedConfigNodeEndPoints;
        }
        if (args != null && args.consensusLogicalTimeMap != null) {
            this.consensusLogicalTimeMap = args.consensusLogicalTimeMap;
        }
        if (args != null && args.pipeCompletedList != null) {
            this.pipeCompletedList = args.pipeCompletedList;
        }
        if (args != null && args.pipeRemainingEventCountList != null) {
            this.pipeRemainingEventCountList = args.pipeRemainingEventCountList;
        }
        if (args != null && args.pipeRemainingTimeList != null) {
            this.pipeRemainingTimeList = args.pipeRemainingTimeList;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("TDataNodeHeartbeatResp");
        if (this.heartbeatTimestamp != null) {
            output.writeFieldBegin("heartbeatTimestamp", thrift.Thrift.Type.I64, 1);
            output.writeI64(this.heartbeatTimestamp);
            output.writeFieldEnd();
        }
        if (this.status != null) {
            output.writeFieldBegin("status", thrift.Thrift.Type.STRING, 2);
            output.writeString(this.status);
            output.writeFieldEnd();
        }
        if (this.statusReason != null) {
            output.writeFieldBegin("statusReason", thrift.Thrift.Type.STRING, 3);
            output.writeString(this.statusReason);
            output.writeFieldEnd();
        }
        if (this.judgedLeaders != null) {
            output.writeFieldBegin("judgedLeaders", thrift.Thrift.Type.MAP, 4);
            output.writeMapBegin(thrift.Thrift.Type.STRUCT, thrift.Thrift.Type.BOOL, this.judgedLeaders.size);
            this.judgedLeaders.forEach((value_1: boolean, key_1: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId): void => {
                key_1.write(output);
                output.writeBool(value_1);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.loadSample != null) {
            output.writeFieldBegin("loadSample", thrift.Thrift.Type.STRUCT, 5);
            this.loadSample.write(output);
            output.writeFieldEnd();
        }
        if (this.regionSeriesUsageMap != null) {
            output.writeFieldBegin("regionSeriesUsageMap", thrift.Thrift.Type.MAP, 6);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.I64, this.regionSeriesUsageMap.size);
            this.regionSeriesUsageMap.forEach((value_2: Int64, key_2: number): void => {
                output.writeI32(key_2);
                output.writeI64(value_2);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.regionDeviceUsageMap != null) {
            output.writeFieldBegin("regionDeviceUsageMap", thrift.Thrift.Type.MAP, 7);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.I64, this.regionDeviceUsageMap.size);
            this.regionDeviceUsageMap.forEach((value_3: Int64, key_3: number): void => {
                output.writeI32(key_3);
                output.writeI64(value_3);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.regionDisk != null) {
            output.writeFieldBegin("regionDisk", thrift.Thrift.Type.MAP, 8);
            output.writeMapBegin(thrift.Thrift.Type.I32, thrift.Thrift.Type.I64, this.regionDisk.size);
            this.regionDisk.forEach((value_4: Int64, key_4: number): void => {
                output.writeI32(key_4);
                output.writeI64(value_4);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.schemaLimitLevel != null) {
            output.writeFieldBegin("schemaLimitLevel", thrift.Thrift.Type.I32, 9);
            output.writeI32(this.schemaLimitLevel);
            output.writeFieldEnd();
        }
        if (this.pipeMetaList != null) {
            output.writeFieldBegin("pipeMetaList", thrift.Thrift.Type.LIST, 10);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.pipeMetaList.length);
            this.pipeMetaList.forEach((value_5: Buffer): void => {
                output.writeBinary(value_5);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.activateStatus != null) {
            output.writeFieldBegin("activateStatus", thrift.Thrift.Type.STRING, 11);
            output.writeString(this.activateStatus);
            output.writeFieldEnd();
        }
        if (this.confirmedConfigNodeEndPoints != null) {
            output.writeFieldBegin("confirmedConfigNodeEndPoints", thrift.Thrift.Type.SET, 12);
            output.writeSetBegin(thrift.Thrift.Type.STRUCT, this.confirmedConfigNodeEndPoints.size);
            this.confirmedConfigNodeEndPoints.forEach((value_6: org_apache_iotdb_common_rpc_thrift.TEndPoint): void => {
                value_6.write(output);
            });
            output.writeSetEnd();
            output.writeFieldEnd();
        }
        if (this.consensusLogicalTimeMap != null) {
            output.writeFieldBegin("consensusLogicalTimeMap", thrift.Thrift.Type.MAP, 13);
            output.writeMapBegin(thrift.Thrift.Type.STRUCT, thrift.Thrift.Type.I64, this.consensusLogicalTimeMap.size);
            this.consensusLogicalTimeMap.forEach((value_7: Int64, key_5: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId): void => {
                key_5.write(output);
                output.writeI64(value_7);
            });
            output.writeMapEnd();
            output.writeFieldEnd();
        }
        if (this.pipeCompletedList != null) {
            output.writeFieldBegin("pipeCompletedList", thrift.Thrift.Type.LIST, 14);
            output.writeListBegin(thrift.Thrift.Type.BOOL, this.pipeCompletedList.length);
            this.pipeCompletedList.forEach((value_8: boolean): void => {
                output.writeBool(value_8);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pipeRemainingEventCountList != null) {
            output.writeFieldBegin("pipeRemainingEventCountList", thrift.Thrift.Type.LIST, 15);
            output.writeListBegin(thrift.Thrift.Type.I64, this.pipeRemainingEventCountList.length);
            this.pipeRemainingEventCountList.forEach((value_9: Int64): void => {
                output.writeI64(value_9);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.pipeRemainingTimeList != null) {
            output.writeFieldBegin("pipeRemainingTimeList", thrift.Thrift.Type.LIST, 16);
            output.writeListBegin(thrift.Thrift.Type.DOUBLE, this.pipeRemainingTimeList.length);
            this.pipeRemainingTimeList.forEach((value_10: number): void => {
                output.writeDouble(value_10);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): TDataNodeHeartbeatResp {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.TField = input.readFieldBegin();
            const fieldType: thrift.Thrift.Type = ret.ftype;
            const fieldId: number = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_11: Int64 = input.readI64();
                        _args.heartbeatTimestamp = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_12: string = input.readString();
                        _args.status = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_13: string = input.readString();
                        _args.statusReason = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_14: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, boolean> = new Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, boolean>();
                        const metadata_1: thrift.TMap = input.readMapBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const key_6: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId = org_apache_iotdb_common_rpc_thrift.TConsensusGroupId.read(input);
                            const value_15: boolean = input.readBool();
                            value_14.set(key_6, value_15);
                        }
                        input.readMapEnd();
                        _args.judgedLeaders = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRUCT) {
                        const value_16: org_apache_iotdb_common_rpc_thrift.TLoadSample = org_apache_iotdb_common_rpc_thrift.TLoadSample.read(input);
                        _args.loadSample = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_17: Map<number, Int64> = new Map<number, Int64>();
                        const metadata_2: thrift.TMap = input.readMapBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const key_7: number = input.readI32();
                            const value_18: Int64 = input.readI64();
                            value_17.set(key_7, value_18);
                        }
                        input.readMapEnd();
                        _args.regionSeriesUsageMap = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_19: Map<number, Int64> = new Map<number, Int64>();
                        const metadata_3: thrift.TMap = input.readMapBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const key_8: number = input.readI32();
                            const value_20: Int64 = input.readI64();
                            value_19.set(key_8, value_20);
                        }
                        input.readMapEnd();
                        _args.regionDeviceUsageMap = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_21: Map<number, Int64> = new Map<number, Int64>();
                        const metadata_4: thrift.TMap = input.readMapBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const key_9: number = input.readI32();
                            const value_22: Int64 = input.readI64();
                            value_21.set(key_9, value_22);
                        }
                        input.readMapEnd();
                        _args.regionDisk = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_23: TSchemaLimitLevel.TSchemaLimitLevel = input.readI32();
                        _args.schemaLimitLevel = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_24: Array<Buffer> = new Array<Buffer>();
                        const metadata_5: thrift.TList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_25: Buffer = input.readBinary();
                            value_24.push(value_25);
                        }
                        input.readListEnd();
                        _args.pipeMetaList = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_26: string = input.readString();
                        _args.activateStatus = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 12:
                    if (fieldType === thrift.Thrift.Type.SET) {
                        const value_27: Set<org_apache_iotdb_common_rpc_thrift.TEndPoint> = new Set<org_apache_iotdb_common_rpc_thrift.TEndPoint>();
                        const metadata_6: thrift.TSet = input.readSetBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_28: org_apache_iotdb_common_rpc_thrift.TEndPoint = org_apache_iotdb_common_rpc_thrift.TEndPoint.read(input);
                            value_27.add(value_28);
                        }
                        input.readSetEnd();
                        _args.confirmedConfigNodeEndPoints = value_27;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 13:
                    if (fieldType === thrift.Thrift.Type.MAP) {
                        const value_29: Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, Int64> = new Map<org_apache_iotdb_common_rpc_thrift.TConsensusGroupId, Int64>();
                        const metadata_7: thrift.TMap = input.readMapBegin();
                        const size_7: number = metadata_7.size;
                        for (let i_7: number = 0; i_7 < size_7; i_7++) {
                            const key_10: org_apache_iotdb_common_rpc_thrift.TConsensusGroupId = org_apache_iotdb_common_rpc_thrift.TConsensusGroupId.read(input);
                            const value_30: Int64 = input.readI64();
                            value_29.set(key_10, value_30);
                        }
                        input.readMapEnd();
                        _args.consensusLogicalTimeMap = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 14:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_31: Array<boolean> = new Array<boolean>();
                        const metadata_8: thrift.TList = input.readListBegin();
                        const size_8: number = metadata_8.size;
                        for (let i_8: number = 0; i_8 < size_8; i_8++) {
                            const value_32: boolean = input.readBool();
                            value_31.push(value_32);
                        }
                        input.readListEnd();
                        _args.pipeCompletedList = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 15:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_33: Array<Int64> = new Array<Int64>();
                        const metadata_9: thrift.TList = input.readListBegin();
                        const size_9: number = metadata_9.size;
                        for (let i_9: number = 0; i_9 < size_9; i_9++) {
                            const value_34: Int64 = input.readI64();
                            value_33.push(value_34);
                        }
                        input.readListEnd();
                        _args.pipeRemainingEventCountList = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 16:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_35: Array<number> = new Array<number>();
                        const metadata_10: thrift.TList = input.readListBegin();
                        const size_10: number = metadata_10.size;
                        for (let i_10: number = 0; i_10 < size_10; i_10++) {
                            const value_36: number = input.readDouble();
                            value_35.push(value_36);
                        }
                        input.readListEnd();
                        _args.pipeRemainingTimeList = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.heartbeatTimestamp !== undefined && _args.status !== undefined) {
            return new TDataNodeHeartbeatResp(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, "Unable to read TDataNodeHeartbeatResp from input");
        }
    }
}
